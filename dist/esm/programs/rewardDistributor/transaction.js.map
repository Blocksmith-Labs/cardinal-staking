{"version":3,"file":"transaction.js","sourceRoot":"","sources":["../../../../src/programs/rewardDistributor/transaction.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  findAta,\r\n  tryGetAccount,\r\n  withFindOrInitAssociatedTokenAccount,\r\n} from \"@cardinal/common\";\r\nimport type { web3 } from \"@coral-xyz/anchor\";\r\nimport { BN } from \"@coral-xyz/anchor\";\r\nimport type { Wallet } from \"@coral-xyz/anchor/dist/cjs/provider\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport type { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\r\nimport { SystemProgram } from \"@solana/web3.js\";\r\n\r\nimport { getRewardDistributor, getRewardEntry } from \"./accounts\";\r\nimport {\r\n  REWARD_MANAGER,\r\n  RewardDistributorKind,\r\n  rewardDistributorProgram,\r\n} from \"./constants\";\r\nimport { findRewardDistributorId, findRewardEntryId } from \"./pda\";\r\nimport { withRemainingAccountsForKind } from \"./utils\";\r\n\r\nexport const withInitRewardDistributor = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    rewardMintId: PublicKey;\r\n    rewardAmount?: BN;\r\n    rewardDurationSeconds?: BN;\r\n    kind?: RewardDistributorKind;\r\n    maxSupply?: BN;\r\n    supply?: BN;\r\n    defaultMultiplier?: BN;\r\n    multiplierDecimals?: number;\r\n    maxRewardSecondsReceived?: BN;\r\n  }\r\n): Promise<[Transaction, web3.PublicKey]> => {\r\n  const rewardDistributorId = findRewardDistributorId(params.stakePoolId);\r\n  const remainingAccountsForKind = await withRemainingAccountsForKind(\r\n    transaction,\r\n    connection,\r\n    wallet,\r\n    rewardDistributorId,\r\n    params.kind || RewardDistributorKind.Mint,\r\n    params.rewardMintId\r\n  );\r\n  const program = rewardDistributorProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .initRewardDistributor({\r\n      rewardAmount: params.rewardAmount || new BN(1),\r\n      rewardDurationSeconds: params.rewardDurationSeconds || new BN(1),\r\n      maxSupply: params.maxSupply || null,\r\n      supply: params.supply || null,\r\n      kind: params.kind || RewardDistributorKind.Mint,\r\n      defaultMultiplier: params.defaultMultiplier || null,\r\n      multiplierDecimals: params.multiplierDecimals || null,\r\n      maxRewardSecondsReceived: params.maxRewardSecondsReceived || null,\r\n    })\r\n    .accounts({\r\n      rewardDistributor: rewardDistributorId,\r\n      stakePool: params.stakePoolId,\r\n      rewardMint: params.rewardMintId,\r\n      authority: wallet.publicKey,\r\n      payer: wallet.publicKey,\r\n      tokenProgram: TOKEN_PROGRAM_ID,\r\n      systemProgram: SystemProgram.programId,\r\n    })\r\n    .remainingAccounts(remainingAccountsForKind)\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return [transaction, rewardDistributorId];\r\n};\r\n\r\nexport const withInitRewardEntry = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakeEntryId: PublicKey;\r\n    rewardDistributorId: PublicKey;\r\n  }\r\n): Promise<[Transaction, PublicKey]> => {\r\n  const rewardEntryId = findRewardEntryId(\r\n    params.rewardDistributorId,\r\n    params.stakeEntryId\r\n  );\r\n  const program = rewardDistributorProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .initRewardEntry()\r\n    .accounts({\r\n      rewardEntry: rewardEntryId,\r\n      stakeEntry: params.stakeEntryId,\r\n      rewardDistributor: params.rewardDistributorId,\r\n      payer: wallet.publicKey,\r\n      systemProgram: SystemProgram.programId,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return [transaction, rewardEntryId];\r\n};\r\n\r\nexport const withClaimRewards = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    stakeEntryId: PublicKey;\r\n    lastStaker: PublicKey;\r\n    payer?: PublicKey;\r\n    skipRewardMintTokenAccount?: boolean;\r\n  }\r\n): Promise<Transaction> => {\r\n  const rewardDistributorId = findRewardDistributorId(params.stakePoolId);\r\n  const rewardDistributorData = await tryGetAccount(() =>\r\n    getRewardDistributor(connection, rewardDistributorId)\r\n  );\r\n\r\n  if (rewardDistributorData) {\r\n    const rewardMintTokenAccountId = params.skipRewardMintTokenAccount\r\n      ? await findAta(\r\n          rewardDistributorData.parsed.rewardMint,\r\n          params.lastStaker,\r\n          true\r\n        )\r\n      : await withFindOrInitAssociatedTokenAccount(\r\n          transaction,\r\n          connection,\r\n          rewardDistributorData.parsed.rewardMint,\r\n          params.lastStaker,\r\n          params.payer ?? wallet.publicKey\r\n        );\r\n\r\n    const remainingAccountsForKind = await withRemainingAccountsForKind(\r\n      transaction,\r\n      connection,\r\n      wallet,\r\n      rewardDistributorId,\r\n      rewardDistributorData.parsed.kind,\r\n      rewardDistributorData.parsed.rewardMint,\r\n      true\r\n    );\r\n\r\n    const rewardEntryId = findRewardEntryId(\r\n      rewardDistributorData.pubkey,\r\n      params.stakeEntryId\r\n    );\r\n    const rewardEntryData = await tryGetAccount(() =>\r\n      getRewardEntry(connection, rewardEntryId)\r\n    );\r\n\r\n    const program = rewardDistributorProgram(connection, wallet);\r\n    if (!rewardEntryData) {\r\n      const ix = await program.methods\r\n        .initRewardEntry()\r\n        .accounts({\r\n          rewardEntry: rewardEntryId,\r\n          stakeEntry: params.stakeEntryId,\r\n          rewardDistributor: rewardDistributorData.pubkey,\r\n          payer: wallet.publicKey,\r\n          systemProgram: SystemProgram.programId,\r\n        })\r\n        .instruction();\r\n      transaction.add(ix);\r\n    }\r\n\r\n    const ix = await program.methods\r\n      .claimRewards()\r\n      .accounts({\r\n        rewardEntry: rewardEntryId,\r\n        rewardDistributor: rewardDistributorData.pubkey,\r\n        stakeEntry: params.stakeEntryId,\r\n        stakePool: params.stakePoolId,\r\n        rewardMint: rewardDistributorData.parsed.rewardMint,\r\n        userRewardMintTokenAccount: rewardMintTokenAccountId,\r\n        rewardManager: REWARD_MANAGER,\r\n        user: params.payer ?? wallet.publicKey,\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        systemProgram: SystemProgram.programId,\r\n      })\r\n      .remainingAccounts(remainingAccountsForKind)\r\n      .instruction();\r\n    transaction.add(ix);\r\n  }\r\n  return transaction;\r\n};\r\n\r\nexport const withCloseRewardDistributor = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n  }\r\n): Promise<Transaction> => {\r\n  const rewardDistributorId = findRewardDistributorId(params.stakePoolId);\r\n  const rewardDistributorData = await tryGetAccount(() =>\r\n    getRewardDistributor(connection, rewardDistributorId)\r\n  );\r\n\r\n  if (rewardDistributorData) {\r\n    const remainingAccountsForKind = await withRemainingAccountsForKind(\r\n      transaction,\r\n      connection,\r\n      wallet,\r\n      rewardDistributorId,\r\n      rewardDistributorData.parsed.kind,\r\n      rewardDistributorData.parsed.rewardMint\r\n    );\r\n\r\n    const program = rewardDistributorProgram(connection, wallet);\r\n    const ix = await program.methods\r\n      .closeRewardDistributor()\r\n      .accounts({\r\n        rewardDistributor: rewardDistributorData.pubkey,\r\n        stakePool: params.stakePoolId,\r\n        rewardMint: rewardDistributorData.parsed.rewardMint,\r\n        signer: wallet.publicKey,\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n      })\r\n      .remainingAccounts(remainingAccountsForKind)\r\n      .instruction();\r\n    transaction.add(ix);\r\n  }\r\n  return transaction;\r\n};\r\n\r\nexport const withUpdateRewardEntry = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    rewardDistributorId: PublicKey;\r\n    stakeEntryId: PublicKey;\r\n    multiplier: BN;\r\n  }\r\n): Promise<Transaction> => {\r\n  const rewardEntryId = findRewardEntryId(\r\n    params.rewardDistributorId,\r\n    params.stakeEntryId\r\n  );\r\n  const program = rewardDistributorProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .updateRewardEntry({\r\n      multiplier: params.multiplier,\r\n    })\r\n    .accounts({\r\n      rewardEntry: rewardEntryId,\r\n      rewardDistributor: params.rewardDistributorId,\r\n      authority: wallet.publicKey,\r\n    })\r\n    .instruction();\r\n  return transaction.add(ix);\r\n};\r\n\r\nexport const withCloseRewardEntry = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    stakeEntryId: PublicKey;\r\n  }\r\n): Promise<Transaction> => {\r\n  const rewardDistributorId = findRewardDistributorId(params.stakePoolId);\r\n\r\n  const rewardEntryId = findRewardEntryId(\r\n    rewardDistributorId,\r\n    params.stakeEntryId\r\n  );\r\n\r\n  const program = rewardDistributorProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .closeRewardEntry()\r\n    .accounts({\r\n      rewardDistributor: rewardDistributorId,\r\n      rewardEntry: rewardEntryId,\r\n      authority: wallet.publicKey,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return transaction;\r\n};\r\n\r\nexport const withUpdateRewardDistributor = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    defaultMultiplier?: BN;\r\n    multiplierDecimals?: number;\r\n    rewardAmount?: BN;\r\n    rewardDurationSeconds?: BN;\r\n    maxRewardSecondsReceived?: BN;\r\n  }\r\n): Promise<Transaction> => {\r\n  const rewardDistributorId = findRewardDistributorId(params.stakePoolId);\r\n  const rewardDistributorData = await getRewardDistributor(\r\n    connection,\r\n    rewardDistributorId\r\n  );\r\n  const program = rewardDistributorProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .updateRewardDistributor({\r\n      defaultMultiplier:\r\n        params.defaultMultiplier ||\r\n        rewardDistributorData.parsed.defaultMultiplier,\r\n      multiplierDecimals:\r\n        params.multiplierDecimals ||\r\n        rewardDistributorData.parsed.multiplierDecimals,\r\n      rewardAmount:\r\n        params.rewardAmount || rewardDistributorData.parsed.rewardAmount,\r\n      rewardDurationSeconds:\r\n        params.rewardDurationSeconds ||\r\n        rewardDistributorData.parsed.rewardDurationSeconds,\r\n      maxRewardSecondsReceived:\r\n        params.maxRewardSecondsReceived ||\r\n        rewardDistributorData.parsed.maxRewardSecondsReceived,\r\n    })\r\n    .accounts({\r\n      rewardDistributor: rewardDistributorId,\r\n      authority: wallet.publicKey,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return transaction;\r\n};\r\nexport const withReclaimFunds = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    amount: BN;\r\n  }\r\n): Promise<Transaction> => {\r\n  const rewardDistributorId = findRewardDistributorId(params.stakePoolId);\r\n\r\n  const rewardDistributorData = await tryGetAccount(() =>\r\n    getRewardDistributor(connection, rewardDistributorId)\r\n  );\r\n  if (!rewardDistributorData) {\r\n    throw new Error(\"No reward distrbutor found\");\r\n  }\r\n\r\n  const rewardDistributorTokenAccountId = await findAta(\r\n    rewardDistributorData.parsed.rewardMint,\r\n    rewardDistributorData.pubkey,\r\n    true\r\n  );\r\n\r\n  const authorityTokenAccountId = await withFindOrInitAssociatedTokenAccount(\r\n    transaction,\r\n    connection,\r\n    rewardDistributorData.parsed.rewardMint,\r\n    wallet.publicKey,\r\n    wallet.publicKey,\r\n    true\r\n  );\r\n\r\n  const program = rewardDistributorProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .reclaimFunds(params.amount)\r\n    .accounts({\r\n      rewardDistributor: rewardDistributorId,\r\n      rewardDistributorTokenAccount: rewardDistributorTokenAccountId,\r\n      authorityTokenAccount: authorityTokenAccountId,\r\n      authority: wallet.publicKey,\r\n      tokenProgram: TOKEN_PROGRAM_ID,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return transaction;\r\n};\r\n"]}