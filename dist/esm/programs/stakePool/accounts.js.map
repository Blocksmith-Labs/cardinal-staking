{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../../../../src/programs/stakePool/accounts.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccountData } from \"@cardinal/common\";\nimport {\n  AnchorProvider,\n  BorshAccountsCoder,\n  Program,\n  utils,\n} from \"@project-serum/anchor\";\nimport { SignerWallet } from \"@saberhq/solana-contrib\";\nimport type { Connection } from \"@solana/web3.js\";\nimport { Keypair, PublicKey } from \"@solana/web3.js\";\n\nimport type { STAKE_POOL_PROGRAM, StakePoolData } from \".\";\nimport { STAKE_POOL_ADDRESS, STAKE_POOL_IDL } from \".\";\nimport type {\n  IdentifierData,\n  StakeAuthorizationData,\n  StakeBoosterData,\n  StakeEntryData,\n} from \"./constants\";\nimport { AUTHORITY_OFFSET, POOL_OFFSET, STAKER_OFFSET } from \"./constants\";\nimport { findIdentifierId } from \"./pda\";\n\nconst getProgram = (connection: Connection) => {\n  const provider = new AnchorProvider(\n    connection,\n    new SignerWallet(Keypair.generate()),\n    {}\n  );\n  return new Program<STAKE_POOL_PROGRAM>(\n    STAKE_POOL_IDL,\n    STAKE_POOL_ADDRESS,\n    provider\n  );\n};\n\nexport const getStakePool = async (\n  connection: Connection,\n  stakePoolId: PublicKey\n): Promise<AccountData<StakePoolData>> => {\n  const stakePoolProgram = getProgram(connection);\n\n  const parsed = await stakePoolProgram.account.stakePool.fetch(stakePoolId);\n  return {\n    parsed,\n    pubkey: stakePoolId,\n  };\n};\n\nexport const getStakePools = async (\n  connection: Connection,\n  stakePoolIds: PublicKey[]\n): Promise<AccountData<StakePoolData>[]> => {\n  const stakePoolProgram = getProgram(connection);\n\n  const stakePools = (await stakePoolProgram.account.stakePool.fetchMultiple(\n    stakePoolIds\n  )) as StakePoolData[];\n  return stakePools.map((tm, i) => ({\n    parsed: tm,\n    pubkey: stakePoolIds[i]!,\n  }));\n};\n\nexport const getAllStakePools = async (\n  connection: Connection\n): Promise<AccountData<StakePoolData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    STAKE_POOL_ADDRESS,\n    {\n      filters: [\n        {\n          memcmp: {\n            offset: 0,\n            bytes: utils.bytes.bs58.encode(\n              BorshAccountsCoder.accountDiscriminator(\"stakePool\")\n            ),\n          },\n        },\n      ],\n    }\n  );\n  const stakePoolDatas: AccountData<StakePoolData>[] = [];\n  const coder = new BorshAccountsCoder(STAKE_POOL_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const stakePoolData: StakePoolData = coder.decode(\n        \"stakePool\",\n        account.account.data\n      );\n      if (stakePoolData) {\n        stakePoolDatas.push({\n          ...account,\n          parsed: stakePoolData,\n        });\n      }\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  });\n  return stakePoolDatas.sort((a, b) =>\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\n  );\n};\n\nexport const getStakeEntriesForUser = async (\n  connection: Connection,\n  user: PublicKey\n): Promise<AccountData<StakeEntryData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    STAKE_POOL_ADDRESS,\n    {\n      filters: [{ memcmp: { offset: STAKER_OFFSET, bytes: user.toBase58() } }],\n    }\n  );\n\n  const stakeEntryDatas: AccountData<StakeEntryData>[] = [];\n  const coder = new BorshAccountsCoder(STAKE_POOL_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const stakeEntryData: StakeEntryData = coder.decode(\n        \"stakeEntry\",\n        account.account.data\n      );\n      if (stakeEntryData) {\n        stakeEntryDatas.push({\n          ...account,\n          parsed: stakeEntryData,\n        });\n      }\n    } catch (e) {\n      console.log(`Failed to decode token manager data`);\n    }\n  });\n\n  return stakeEntryDatas.sort((a, b) =>\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\n  );\n};\n\nexport const getAllActiveStakeEntries = async (\n  connection: Connection\n): Promise<AccountData<StakeEntryData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    STAKE_POOL_ADDRESS,\n    {\n      filters: [\n        {\n          memcmp: {\n            offset: 0,\n            bytes: utils.bytes.bs58.encode(\n              BorshAccountsCoder.accountDiscriminator(\"stakeEntry\")\n            ),\n          },\n        },\n      ],\n    }\n  );\n  const stakeEntryDatas: AccountData<StakeEntryData>[] = [];\n  const coder = new BorshAccountsCoder(STAKE_POOL_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const stakeEntryData: StakeEntryData = coder.decode(\n        \"stakeEntry\",\n        account.account.data\n      );\n      if (\n        stakeEntryData &&\n        stakeEntryData.lastStaker.toString() !== PublicKey.default.toString()\n      ) {\n        stakeEntryDatas.push({\n          ...account,\n          parsed: stakeEntryData,\n        });\n      }\n    } catch (e) {\n      // console.log(`Failed to decode stake entry data`);\n    }\n  });\n\n  return stakeEntryDatas.sort((a, b) =>\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\n  );\n};\n\nexport const getAllStakeEntriesForPool = async (\n  connection: Connection,\n  stakePoolId: PublicKey\n): Promise<AccountData<StakeEntryData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    STAKE_POOL_ADDRESS,\n    {\n      filters: [\n        {\n          memcmp: {\n            offset: 0,\n            bytes: utils.bytes.bs58.encode(\n              BorshAccountsCoder.accountDiscriminator(\"stakeEntry\")\n            ),\n          },\n        },\n        {\n          memcmp: { offset: POOL_OFFSET, bytes: stakePoolId.toBase58() },\n        },\n      ],\n    }\n  );\n  const stakeEntryDatas: AccountData<StakeEntryData>[] = [];\n  const coder = new BorshAccountsCoder(STAKE_POOL_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const stakeEntryData: StakeEntryData = coder.decode(\n        \"stakeEntry\",\n        account.account.data\n      );\n      stakeEntryDatas.push({\n        ...account,\n        parsed: stakeEntryData,\n      });\n    } catch (e) {\n      // console.log(`Failed to decode stake entry data`);\n    }\n  });\n\n  return stakeEntryDatas.sort((a, b) =>\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\n  );\n};\n\nexport const getActiveStakeEntriesForPool = async (\n  connection: Connection,\n  stakePoolId: PublicKey\n): Promise<AccountData<StakeEntryData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    STAKE_POOL_ADDRESS,\n    {\n      filters: [\n        {\n          memcmp: { offset: POOL_OFFSET, bytes: stakePoolId.toBase58() },\n        },\n      ],\n    }\n  );\n  const stakeEntryDatas: AccountData<StakeEntryData>[] = [];\n  const coder = new BorshAccountsCoder(STAKE_POOL_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const stakeEntryData: StakeEntryData = coder.decode(\n        \"stakeEntry\",\n        account.account.data\n      );\n      if (\n        stakeEntryData &&\n        stakeEntryData.lastStaker.toString() !== PublicKey.default.toString()\n      ) {\n        stakeEntryDatas.push({\n          ...account,\n          parsed: stakeEntryData,\n        });\n      }\n    } catch (e) {\n      // console.log(`Failed to decode token manager data`);\n    }\n  });\n\n  return stakeEntryDatas.sort((a, b) =>\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\n  );\n};\n\nexport const getStakeEntry = async (\n  connection: Connection,\n  stakeEntryId: PublicKey\n): Promise<AccountData<StakeEntryData>> => {\n  const stakePoolProgram = getProgram(connection);\n\n  const parsed = await stakePoolProgram.account.stakeEntry.fetch(stakeEntryId);\n  return {\n    parsed,\n    pubkey: stakeEntryId,\n  };\n};\n\nexport const getStakeEntries = async (\n  connection: Connection,\n  stakeEntryIds: PublicKey[]\n): Promise<AccountData<StakeEntryData>[]> => {\n  const stakePoolProgram = getProgram(connection);\n\n  const stakeEntries = (await stakePoolProgram.account.stakeEntry.fetchMultiple(\n    stakeEntryIds\n  )) as StakePoolData[];\n  return stakeEntries.map((tm, i) => ({\n    parsed: tm,\n    pubkey: stakeEntryIds[i]!,\n  }));\n};\n\nexport const getPoolIdentifier = async (\n  connection: Connection\n): Promise<AccountData<IdentifierData>> => {\n  const stakePoolProgram = getProgram(connection);\n  const [identifierId] = await findIdentifierId();\n  const parsed = await stakePoolProgram.account.identifier.fetch(identifierId);\n  return {\n    parsed,\n    pubkey: identifierId,\n  };\n};\n\nexport const getStakeAuthorization = async (\n  connection: Connection,\n  stakeAuthorizationId: PublicKey\n): Promise<AccountData<StakeAuthorizationData>> => {\n  const stakePoolProgram = getProgram(connection);\n  const parsed = await stakePoolProgram.account.stakeAuthorizationRecord.fetch(\n    stakeAuthorizationId\n  );\n  return {\n    parsed,\n    pubkey: stakeAuthorizationId,\n  };\n};\n\nexport const getStakeAuthorizations = async (\n  connection: Connection,\n  stakeAuthorizationIds: PublicKey[]\n): Promise<AccountData<StakeAuthorizationData>[]> => {\n  const stakePoolProgram = getProgram(connection);\n\n  const stakeAuthorizations =\n    (await stakePoolProgram.account.stakeAuthorizationRecord.fetchMultiple(\n      stakeAuthorizationIds\n    )) as StakeAuthorizationData[];\n\n  return stakeAuthorizations.map((data, i) => ({\n    parsed: data,\n    pubkey: stakeAuthorizationIds[i]!,\n  }));\n};\n\nexport const getStakeAuthorizationsForPool = async (\n  connection: Connection,\n  poolId: PublicKey\n): Promise<AccountData<StakeAuthorizationData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    STAKE_POOL_ADDRESS,\n    {\n      filters: [\n        {\n          memcmp: {\n            offset: 0,\n            bytes: utils.bytes.bs58.encode(\n              BorshAccountsCoder.accountDiscriminator(\n                \"stakeAuthorizationRecord\"\n              )\n            ),\n          },\n        },\n        {\n          memcmp: { offset: POOL_OFFSET, bytes: poolId.toBase58() },\n        },\n      ],\n    }\n  );\n\n  const stakeAuthorizationDatas: AccountData<StakeAuthorizationData>[] = [];\n  const coder = new BorshAccountsCoder(STAKE_POOL_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const data: StakeAuthorizationData = coder.decode(\n        \"stakeAuthorizationRecord\",\n        account.account.data\n      );\n      stakeAuthorizationDatas.push({\n        ...account,\n        parsed: data,\n      });\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  });\n\n  return stakeAuthorizationDatas.sort((a, b) =>\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\n  );\n};\n\nexport const getStakePoolsByAuthority = async (\n  connection: Connection,\n  user: PublicKey\n): Promise<AccountData<StakePoolData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    STAKE_POOL_ADDRESS,\n    {\n      filters: [\n        {\n          memcmp: {\n            offset: 0,\n            bytes: utils.bytes.bs58.encode(\n              BorshAccountsCoder.accountDiscriminator(\"stakePool\")\n            ),\n          },\n        },\n        {\n          memcmp: {\n            offset: AUTHORITY_OFFSET,\n            bytes: user.toBase58(),\n          },\n        },\n      ],\n    }\n  );\n  const stakePoolDatas: AccountData<StakePoolData>[] = [];\n  const coder = new BorshAccountsCoder(STAKE_POOL_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const stakePoolData: StakePoolData = coder.decode(\n        \"stakePool\",\n        account.account.data\n      );\n      if (stakePoolData) {\n        stakePoolDatas.push({\n          ...account,\n          parsed: stakePoolData,\n        });\n      }\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  });\n  return stakePoolDatas.sort((a, b) =>\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\n  );\n};\n\nexport const getAllStakeEntries = async (\n  connection: Connection\n): Promise<AccountData<StakeEntryData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    STAKE_POOL_ADDRESS,\n    {\n      filters: [\n        {\n          memcmp: {\n            offset: 0,\n            bytes: utils.bytes.bs58.encode(\n              BorshAccountsCoder.accountDiscriminator(\"stakeEntry\")\n            ),\n          },\n        },\n      ],\n    }\n  );\n  const stakeEntryDatas: AccountData<StakeEntryData>[] = [];\n  const coder = new BorshAccountsCoder(STAKE_POOL_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const stakeEntryData: StakeEntryData = coder.decode(\n        \"stakeEntry\",\n        account.account.data\n      );\n      if (stakeEntryData) {\n        stakeEntryDatas.push({\n          ...account,\n          parsed: stakeEntryData,\n        });\n      }\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  });\n  return stakeEntryDatas.sort((a, b) =>\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\n  );\n};\n\nexport const getStakeBooster = async (\n  connection: Connection,\n  stakeBoosterId: PublicKey\n): Promise<AccountData<StakeBoosterData>> => {\n  const stakePoolProgram = getProgram(connection);\n  const parsed = await stakePoolProgram.account.stakeBooster.fetch(\n    stakeBoosterId\n  );\n  return {\n    parsed,\n    pubkey: stakeBoosterId,\n  };\n};\n"]}