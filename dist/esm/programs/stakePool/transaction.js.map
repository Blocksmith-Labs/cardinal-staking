{"version":3,"file":"transaction.js","sourceRoot":"","sources":["../../../../src/programs/stakePool/transaction.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  findMintMetadataId,\r\n  METADATA_PROGRAM_ID,\r\n  tryGetAccount,\r\n  withFindOrInitAssociatedTokenAccount,\r\n} from \"@cardinal/common\";\r\nimport { BN } from \"@coral-xyz/anchor\";\r\nimport type { Wallet } from \"@coral-xyz/anchor/dist/cjs/provider\";\r\nimport { ASSOCIATED_PROGRAM_ID } from \"@coral-xyz/anchor/dist/cjs/utils/token\";\r\nimport {\r\n  getAssociatedTokenAddressSync,\r\n  TOKEN_PROGRAM_ID,\r\n} from \"@solana/spl-token\";\r\nimport type { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\r\nimport {\r\n  Keypair,\r\n  SystemProgram,\r\n  SYSVAR_RENT_PUBKEY,\r\n  SYSVAR_SLOT_HASHES_PUBKEY,\r\n} from \"@solana/web3.js\";\r\nimport { TOKEN_MANAGER_ADDRESS } from \"cardinal-token-manager/dist/cjs/programs/tokenManager\";\r\nimport { findMintManagerId } from \"cardinal-token-manager/dist/cjs/programs/tokenManager/pda\";\r\n\r\nimport { getPoolIdentifier, getStakeBooster, getStakeEntry } from \"./accounts\";\r\nimport { STAKE_BOOSTER_PAYMENT_MANAGER, stakePoolProgram } from \"./constants\";\r\nimport {\r\n  findGroupEntryId,\r\n  findIdentifierId,\r\n  findStakeAuthorizationId,\r\n  findStakeBoosterId,\r\n  findStakePoolId,\r\n} from \"./pda\";\r\nimport { remainingAccountsForInitStakeEntry } from \"./utils\";\r\nimport { getPaymentManager } from \"cardinal-token-manager/dist/cjs/programs/paymentManager/accounts\";\r\nimport { PAYMENT_MANAGER_ADDRESS } from \"cardinal-token-manager/dist/cjs/programs/paymentManager\";\r\n\r\nexport const withInitStakePool = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    requiresCollections?: PublicKey[];\r\n    requiresCreators?: PublicKey[];\r\n    requiresAuthorization?: boolean;\r\n    overlayText?: string;\r\n    imageUri?: string;\r\n    resetOnStake?: boolean;\r\n    cooldownSeconds?: number;\r\n    minStakeSeconds?: number;\r\n    endDate?: BN;\r\n    doubleOrResetEnabled?: boolean;\r\n  }\r\n): Promise<[Transaction, PublicKey]> => {\r\n  const identifierId = findIdentifierId();\r\n  const identifierData = await tryGetAccount(() =>\r\n    getPoolIdentifier(connection)\r\n  );\r\n  const identifier = identifierData?.parsed.count || new BN(1);\r\n\r\n  const program = stakePoolProgram(connection, wallet);\r\n  if (!identifierData) {\r\n    const ix = await program.methods\r\n      .initIdentifier()\r\n      .accounts({\r\n        identifier: identifierId,\r\n        payer: wallet.publicKey,\r\n        systemProgram: SystemProgram.programId,\r\n      })\r\n      .instruction();\r\n    transaction.add(ix);\r\n  }\r\n\r\n  const stakePoolId = findStakePoolId(identifier);\r\n  const ix = await program.methods\r\n    .initPool({\r\n      overlayText: params.overlayText || \"STAKED\",\r\n      imageUri: params.imageUri || \"\",\r\n      requiresCollections: params.requiresCollections || [],\r\n      requiresCreators: params.requiresCreators || [],\r\n      requiresAuthorization: params.requiresAuthorization || false,\r\n      authority: wallet.publicKey,\r\n      resetOnStake: params.resetOnStake || false,\r\n      cooldownSeconds: params.cooldownSeconds || null,\r\n      minStakeSeconds: params.minStakeSeconds || null,\r\n      endDate: params.endDate || null,\r\n      doubleOrResetEnabled: params.doubleOrResetEnabled || null,\r\n    })\r\n    .accounts({\r\n      stakePool: stakePoolId,\r\n      identifier: identifierId,\r\n      payer: wallet.publicKey,\r\n      systemProgram: SystemProgram.programId,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return [transaction, stakePoolId];\r\n};\r\n\r\n/**\r\n * Add init stake entry instructions to a transaction\r\n * @param transaction\r\n * @param connection\r\n * @param wallet\r\n * @param params\r\n * @returns Transaction, public key for the created stake entry\r\n */\r\nexport const withInitStakeEntry = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    stakeEntryId: PublicKey;\r\n    originalMintId: PublicKey;\r\n  }\r\n): Promise<Transaction> => {\r\n  const ix = await stakePoolProgram(connection, wallet)\r\n    .methods.initEntry(wallet.publicKey)\r\n    .accounts({\r\n      stakeEntry: params.stakeEntryId,\r\n      stakePool: params.stakePoolId,\r\n      originalMint: params.originalMintId,\r\n      originalMintMetadata: findMintMetadataId(params.originalMintId),\r\n      payer: wallet.publicKey,\r\n      systemProgram: SystemProgram.programId,\r\n    })\r\n    .remainingAccounts(\r\n      remainingAccountsForInitStakeEntry(\r\n        params.stakePoolId,\r\n        params.originalMintId\r\n      )\r\n    )\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return transaction;\r\n};\r\n\r\n/**\r\n * Add authorize stake entry instructions to a transaction\r\n * @param transaction\r\n * @param connection\r\n * @param wallet\r\n * @param params\r\n * @returns Transaction\r\n */\r\nexport const withAuthorizeStakeEntry = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    originalMintId: PublicKey;\r\n  }\r\n): Promise<Transaction> => {\r\n  const ix = await stakePoolProgram(connection, wallet)\r\n    .methods.authorizeMint(params.originalMintId)\r\n    .accounts({\r\n      stakePool: params.stakePoolId,\r\n      stakeAuthorizationRecord: findStakeAuthorizationId(\r\n        params.stakePoolId,\r\n        params.originalMintId\r\n      ),\r\n      payer: wallet.publicKey,\r\n      systemProgram: SystemProgram.programId,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return transaction;\r\n};\r\n\r\n/**\r\n * Add authorize stake entry instructions to a transaction\r\n * @param transaction\r\n * @param connection\r\n * @param wallet\r\n * @param params\r\n * @returns Transaction\r\n */\r\nexport const withDeauthorizeStakeEntry = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    originalMintId: PublicKey;\r\n  }\r\n): Promise<Transaction> => {\r\n  const stakeAuthorizationId = findStakeAuthorizationId(\r\n    params.stakePoolId,\r\n    params.originalMintId\r\n  );\r\n\r\n  const program = stakePoolProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .deauthorizeMint()\r\n    .accounts({\r\n      stakePool: params.stakePoolId,\r\n      stakeAuthorizationRecord: stakeAuthorizationId,\r\n      authority: wallet.publicKey,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return transaction;\r\n};\r\n\r\n/**\r\n * Add init stake mint instructions to a transaction\r\n * @param transaction\r\n * @param connection\r\n * @param wallet\r\n * @param params\r\n * @returns Transaction, keypair of the created stake mint\r\n */\r\nexport const withInitStakeMint = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    stakeEntryId: PublicKey;\r\n    originalMintId: PublicKey;\r\n    stakeMintKeypair: Keypair;\r\n    name: string;\r\n    symbol: string;\r\n  }\r\n): Promise<[Transaction, Keypair]> => {\r\n  const originalMintMetadataId = findMintMetadataId(params.originalMintId);\r\n  const stakeMintMetadataId = findMintMetadataId(\r\n    params.stakeMintKeypair.publicKey\r\n  );\r\n  const stakeEntryStakeMintTokenAccountId = getAssociatedTokenAddressSync(\r\n    params.stakeMintKeypair.publicKey,\r\n    params.stakeEntryId,\r\n    true\r\n  );\r\n\r\n  const program = stakePoolProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .initStakeMint({\r\n      name: params.name,\r\n      symbol: params.symbol,\r\n    })\r\n    .accounts({\r\n      stakeEntry: params.stakeEntryId,\r\n      stakePool: params.stakePoolId,\r\n      originalMint: params.originalMintId,\r\n      originalMintMetadata: originalMintMetadataId,\r\n      stakeMint: params.stakeMintKeypair.publicKey,\r\n      stakeMintMetadata: stakeMintMetadataId,\r\n      stakeEntryStakeMintTokenAccount: stakeEntryStakeMintTokenAccountId,\r\n      mintManager: findMintManagerId(params.stakeMintKeypair.publicKey),\r\n      payer: wallet.publicKey,\r\n      rent: SYSVAR_RENT_PUBKEY,\r\n      tokenProgram: TOKEN_PROGRAM_ID,\r\n      tokenManagerProgram: TOKEN_MANAGER_ADDRESS,\r\n      associatedToken: ASSOCIATED_PROGRAM_ID,\r\n      tokenMetadataProgram: METADATA_PROGRAM_ID,\r\n      systemProgram: SystemProgram.programId,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return [transaction, params.stakeMintKeypair];\r\n};\r\n\r\nexport const withUpdateStakePool = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    requiresCollections?: PublicKey[];\r\n    requiresCreators?: PublicKey[];\r\n    requiresAuthorization?: boolean;\r\n    overlayText?: string;\r\n    imageUri?: string;\r\n    resetOnStake?: boolean;\r\n    cooldownSeconds?: number;\r\n    minStakeSeconds?: number;\r\n    endDate?: BN;\r\n    doubleOrResetEnabled?: boolean;\r\n  }\r\n): Promise<[Transaction, PublicKey]> => {\r\n  const program = stakePoolProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .updatePool({\r\n      imageUri: params.imageUri || \"\",\r\n      overlayText: params.overlayText || \"STAKED\",\r\n      requiresCollections: params.requiresCollections || [],\r\n      requiresCreators: params.requiresCreators || [],\r\n      requiresAuthorization: params.requiresAuthorization || false,\r\n      authority: wallet.publicKey,\r\n      resetOnStake: params.resetOnStake || false,\r\n      cooldownSeconds: params.cooldownSeconds || null,\r\n      minStakeSeconds: params.minStakeSeconds || null,\r\n      endDate: params.endDate || null,\r\n      doubleOrResetEnabled: params.doubleOrResetEnabled || null,\r\n    })\r\n    .accounts({\r\n      stakePool: params.stakePoolId,\r\n      payer: wallet.publicKey,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return [transaction, params.stakePoolId];\r\n};\r\n\r\nexport const withUpdateTotalStakeSeconds = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakeEntryId: PublicKey;\r\n    lastStaker: PublicKey;\r\n  }\r\n): Promise<Transaction> => {\r\n  const ix = await stakePoolProgram(connection, wallet)\r\n    .methods.updateTotalStakeSeconds()\r\n    .accounts({\r\n      stakeEntry: params.stakeEntryId,\r\n      lastStaker: params.lastStaker,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return transaction;\r\n};\r\n\r\nexport const withCloseStakePool = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n  }\r\n): Promise<Transaction> => {\r\n  const program = stakePoolProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .closeStakePool()\r\n    .accounts({\r\n      stakePool: params.stakePoolId,\r\n      authority: wallet.publicKey,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return transaction;\r\n};\r\n\r\nexport const withCloseStakeEntry = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    stakeEntryId: PublicKey;\r\n  }\r\n): Promise<Transaction> => {\r\n  const program = stakePoolProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .closeStakeEntry()\r\n    .accounts({\r\n      stakePool: params.stakePoolId,\r\n      stakeEntry: params.stakeEntryId,\r\n      authority: wallet.publicKey,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return transaction;\r\n};\r\n\r\nexport const withReassignStakeEntry = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    stakeEntryId: PublicKey;\r\n    target: PublicKey;\r\n  }\r\n): Promise<Transaction> => {\r\n  const program = stakePoolProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .reassignStakeEntry({ target: params.target })\r\n    .accounts({\r\n      stakePool: params.stakePoolId,\r\n      stakeEntry: params.stakeEntryId,\r\n      lastStaker: wallet.publicKey,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return transaction;\r\n};\r\n\r\nexport const withDoubleOrResetTotalStakeSeconds = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    stakeEntryId: PublicKey;\r\n  }\r\n): Promise<Transaction> => {\r\n  const program = stakePoolProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .doubleOrResetTotalStakeSeconds()\r\n    .accounts({\r\n      stakeEntry: params.stakeEntryId,\r\n      stakePool: params.stakePoolId,\r\n      lastStaker: wallet.publicKey,\r\n      recentSlothashes: SYSVAR_SLOT_HASHES_PUBKEY,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return transaction;\r\n};\r\n\r\nexport const withInitStakeBooster = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    stakeBoosterIdentifier?: BN;\r\n    paymentAmount: BN;\r\n    paymentMint: PublicKey;\r\n    boostSeconds: BN;\r\n    startTimeSeconds: number;\r\n    payer?: PublicKey;\r\n  }\r\n): Promise<Transaction> => {\r\n  const stakeBoosterId = findStakeBoosterId(\r\n    params.stakePoolId,\r\n    params.stakeBoosterIdentifier\r\n  );\r\n  const program = stakePoolProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .initStakeBooster({\r\n      stakePool: params.stakePoolId,\r\n      identifier: params.stakeBoosterIdentifier || new BN(0),\r\n      paymentAmount: params.paymentAmount,\r\n      paymentMint: params.paymentMint,\r\n      paymentManager: STAKE_BOOSTER_PAYMENT_MANAGER,\r\n      boostSeconds: params.boostSeconds,\r\n      startTimeSeconds: new BN(params.startTimeSeconds),\r\n    })\r\n    .accounts({\r\n      stakeBooster: stakeBoosterId,\r\n      stakePool: params.stakePoolId,\r\n      authority: wallet.publicKey,\r\n      payer: wallet.publicKey,\r\n      systemProgram: SystemProgram.programId,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return transaction;\r\n};\r\n\r\nexport const withUpdateStakeBooster = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    stakeBoosterIdentifier?: BN;\r\n    paymentAmount: BN;\r\n    paymentMint: PublicKey;\r\n    boostSeconds: BN;\r\n    startTimeSeconds: number;\r\n  }\r\n): Promise<Transaction> => {\r\n  const stakeBoosterId = findStakeBoosterId(\r\n    params.stakePoolId,\r\n    params.stakeBoosterIdentifier\r\n  );\r\n  const program = stakePoolProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .updateStakeBooster({\r\n      paymentAmount: params.paymentAmount,\r\n      paymentMint: params.paymentMint,\r\n      paymentManager: STAKE_BOOSTER_PAYMENT_MANAGER,\r\n      boostSeconds: params.boostSeconds,\r\n      startTimeSeconds: new BN(params.startTimeSeconds),\r\n    })\r\n    .accounts({\r\n      stakeBooster: stakeBoosterId,\r\n      stakePool: params.stakePoolId,\r\n      authority: wallet.publicKey,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return transaction;\r\n};\r\n\r\nexport const withCloseStakeBooster = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    stakeBoosterIdentifier?: BN;\r\n  }\r\n): Promise<Transaction> => {\r\n  const stakeBoosterId = findStakeBoosterId(\r\n    params.stakePoolId,\r\n    params.stakeBoosterIdentifier\r\n  );\r\n  const program = stakePoolProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .closeStakeBooster()\r\n    .accounts({\r\n      stakeBooster: stakeBoosterId,\r\n      stakePool: params.stakePoolId,\r\n      authority: wallet.publicKey,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return transaction;\r\n};\r\n\r\nexport const withBoostStakeEntry = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    stakeBoosterIdentifier?: BN;\r\n    stakeEntryId: PublicKey;\r\n    originalMintId: PublicKey;\r\n    payerTokenAccount: PublicKey;\r\n    payer?: PublicKey;\r\n    secondsToBoost: BN;\r\n  }\r\n): Promise<Transaction> => {\r\n  const stakeBoosterId = findStakeBoosterId(\r\n    params.stakePoolId,\r\n    params.stakeBoosterIdentifier\r\n  );\r\n\r\n  const stakeBooster = await getStakeBooster(connection, stakeBoosterId);\r\n  const paymentManager = await getPaymentManager(\r\n    connection,\r\n    stakeBooster.parsed.paymentManager\r\n  );\r\n  const feeCollectorTokenAccount = await withFindOrInitAssociatedTokenAccount(\r\n    transaction,\r\n    connection,\r\n    stakeBooster.parsed.paymentMint,\r\n    paymentManager.parsed.feeCollector,\r\n    params.payer ?? wallet.publicKey\r\n  );\r\n  const paymentRecipientTokenAccount =\r\n    await withFindOrInitAssociatedTokenAccount(\r\n      transaction,\r\n      connection,\r\n      stakeBooster.parsed.paymentMint,\r\n      stakeBooster.parsed.paymentRecipient,\r\n      params.payer ?? wallet.publicKey\r\n    );\r\n  const program = stakePoolProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .boostStakeEntry({ secondsToBoost: params.secondsToBoost })\r\n    .accounts({\r\n      stakeBooster: stakeBooster.pubkey,\r\n      stakePool: params.stakePoolId,\r\n      stakeEntry: params.stakeEntryId,\r\n      originalMint: params.originalMintId,\r\n      payerTokenAccount: params.payerTokenAccount,\r\n      paymentRecipientTokenAccount: paymentRecipientTokenAccount,\r\n      payer: wallet.publicKey,\r\n      paymentManager: stakeBooster.parsed.paymentManager,\r\n      feeCollectorTokenAccount: feeCollectorTokenAccount,\r\n      cardinalPaymentManager: PAYMENT_MANAGER_ADDRESS,\r\n      tokenProgram: TOKEN_PROGRAM_ID,\r\n      systemProgram: SystemProgram.programId,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return transaction;\r\n};\r\n\r\n/**\r\n * Add init group stake entry instructions to a transaction\r\n * @param transaction\r\n * @param connection\r\n * @param wallet\r\n * @param params\r\n * @returns Transaction, public key for the created group stake entry\r\n */\r\nexport const withInitGroupStakeEntry = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    groupCooldownSeconds?: number;\r\n    groupStakeSeconds?: number;\r\n  }\r\n): Promise<[Transaction, PublicKey]> => {\r\n  const id = Keypair.generate();\r\n  const program = stakePoolProgram(connection, wallet);\r\n  const groupEntryId = findGroupEntryId(id.publicKey);\r\n  const ix = await program.methods\r\n    .initGroupEntry({\r\n      groupId: id.publicKey,\r\n      groupCooldownSeconds: params.groupCooldownSeconds || null,\r\n      groupStakeSeconds: params.groupStakeSeconds || null,\r\n    })\r\n    .accounts({\r\n      groupEntry: groupEntryId,\r\n      authority: wallet.publicKey,\r\n      systemProgram: SystemProgram.programId,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return [transaction, groupEntryId];\r\n};\r\n\r\n/**\r\n * Add a stake entry to the group entry instructions to a transaction\r\n * @param transaction\r\n * @param connection\r\n * @param wallet\r\n * @param params\r\n * @returns Transaction, public key for the created group stake entry\r\n */\r\nexport const withAddToGroupEntry = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    groupEntryId: PublicKey;\r\n    stakeEntryId: PublicKey;\r\n    payer?: PublicKey;\r\n  }\r\n): Promise<[Transaction]> => {\r\n  const program = stakePoolProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .addToGroupEntry()\r\n    .accounts({\r\n      groupEntry: params.groupEntryId,\r\n      stakeEntry: params.stakeEntryId,\r\n      authority: wallet.publicKey,\r\n      payer: params.payer ?? wallet.publicKey,\r\n      systemProgram: SystemProgram.programId,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return [transaction];\r\n};\r\n\r\n/**\r\n * Remove stake entry from the group entry instructions to a transaction\r\n * @param transaction\r\n * @param connection\r\n * @param wallet\r\n * @param params\r\n * @returns Transaction, public key for the created group stake entry\r\n */\r\nexport const withRemoveFromGroupEntry = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    groupEntryId: PublicKey;\r\n    stakeEntryId: PublicKey;\r\n  }\r\n): Promise<[Transaction]> => {\r\n  const program = stakePoolProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .removeFromGroupEntry()\r\n    .accounts({\r\n      groupEntry: params.groupEntryId,\r\n      stakeEntry: params.stakeEntryId,\r\n      authority: wallet.publicKey,\r\n      payer: wallet.publicKey,\r\n      systemProgram: SystemProgram.programId,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return [transaction];\r\n};\r\n\r\n/**\r\n * Add init ungrouping instructions to a transaction\r\n * @param transaction\r\n * @param connection\r\n * @param wallet\r\n * @param params\r\n * @returns Transaction, public key for the created group stake entry\r\n */\r\nexport const withInitUngrouping = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    groupEntryId: PublicKey;\r\n  }\r\n): Promise<[Transaction]> => {\r\n  const program = stakePoolProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .initUngrouping()\r\n    .accounts({\r\n      groupEntry: params.groupEntryId,\r\n      authority: wallet.publicKey,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return [transaction];\r\n};\r\n\r\nexport const withClaimStakeEntryFunds = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  stakeEntryId: PublicKey,\r\n  fundsMintId: PublicKey\r\n): Promise<[Transaction]> => {\r\n  const program = stakePoolProgram(connection, wallet);\r\n  const stakeEntryData = await tryGetAccount(() =>\r\n    getStakeEntry(connection, stakeEntryId)\r\n  );\r\n  if (!stakeEntryData) {\r\n    throw `No stake entry id with address ${stakeEntryId.toString()}`;\r\n  }\r\n\r\n  const stakeEntryFundsMintTokenAccountId = getAssociatedTokenAddressSync(\r\n    fundsMintId,\r\n    stakeEntryId,\r\n    true\r\n  );\r\n\r\n  const userFundsMintTokenAccountId =\r\n    await withFindOrInitAssociatedTokenAccount(\r\n      transaction,\r\n      connection,\r\n      fundsMintId,\r\n      stakeEntryData.parsed.lastStaker,\r\n      wallet.publicKey,\r\n      true\r\n    );\r\n\r\n  const ix = await program.methods\r\n    .claimStakeEntryFunds()\r\n    .accounts({\r\n      fundsMint: fundsMintId,\r\n      stakeEntryFundsMintTokenAccount: stakeEntryFundsMintTokenAccountId,\r\n      userFundsMintTokenAccount: userFundsMintTokenAccountId,\r\n      stakePool: stakeEntryData.parsed.pool,\r\n      stakeEntry: stakeEntryId,\r\n      originalMint: stakeEntryData.parsed.originalMint,\r\n      authority: wallet.publicKey,\r\n      tokenProgram: TOKEN_PROGRAM_ID,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return [transaction];\r\n};\r\n"]}