{"version":3,"file":"pda.js","sourceRoot":"","sources":["../../../../src/programs/stakePool/pda.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAC9C,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAE5C,OAAO,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,eAAe,EAAE,MAAM,GAAG,CAAC;AAC1E,OAAO,EACL,gBAAgB,EAChB,eAAe,EACf,wBAAwB,EACxB,kBAAkB,GACnB,MAAM,aAAa,CAAC;AAErB;;;GAGG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,UAAc,EAAa,EAAE;IAC3D,OAAO,SAAS,CAAC,sBAAsB,CACrC;QACE,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;QACxC,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;KACxC,EACD,kBAAkB,CACnB,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAC9B,MAAiB,EACjB,WAAsB,EACtB,cAAyB,EACzB,UAAmB,EACR,EAAE;IACb,OAAO,SAAS,CAAC,sBAAsB,CACrC;QACE,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC;QACzC,WAAW,CAAC,QAAQ,EAAE;QACtB,cAAc,CAAC,QAAQ,EAAE;QACzB,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,EAAE;KAC9D,EACD,kBAAkB,CACnB,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAG,GAAc,EAAE;IAC9C,OAAO,SAAS,CAAC,sBAAsB,CACrC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,EAC1C,kBAAkB,CACnB,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,wBAAwB,GAAG,CACtC,WAAsB,EACtB,MAAiB,EACN,EAAE;IACb,OAAO,SAAS,CAAC,sBAAsB,CACrC;QACE,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,wBAAwB,CAAC;QACjD,WAAW,CAAC,QAAQ,EAAE;QACtB,MAAM,CAAC,QAAQ,EAAE;KAClB,EACD,kBAAkB,CACnB,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAChC,WAAsB,EACtB,UAAe,EACJ,EAAE;IACb,OAAO,SAAS,CAAC,sBAAsB,CACrC;QACE,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC;QAC3C,WAAW,CAAC,QAAQ,EAAE;QACtB,CAAC,UAAU,aAAV,UAAU,cAAV,UAAU,GAAI,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;KACvD,EACD,kBAAkB,CACnB,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,EAAa,EAAa,EAAE;IAC3D,OAAO,SAAS,CAAC,sBAAsB,CACrC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE,EAAE,CAAC,QAAQ,EAAE,CAAC,EAC1D,kBAAkB,CACnB,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC","sourcesContent":["import { BN, utils } from \"@coral-xyz/anchor\";\r\nimport { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { STAKE_ENTRY_SEED, STAKE_POOL_ADDRESS, STAKE_POOL_SEED } from \".\";\r\nimport {\r\n  GROUP_ENTRY_SEED,\r\n  IDENTIFIER_SEED,\r\n  STAKE_AUTHORIZATION_SEED,\r\n  STAKE_BOOSTER_SEED,\r\n} from \"./constants\";\r\n\r\n/**\r\n * Finds the stake pool id.\r\n * @returns\r\n */\r\nexport const findStakePoolId = (identifier: BN): PublicKey => {\r\n  return PublicKey.findProgramAddressSync(\r\n    [\r\n      utils.bytes.utf8.encode(STAKE_POOL_SEED),\r\n      identifier.toArrayLike(Buffer, \"le\", 8),\r\n    ],\r\n    STAKE_POOL_ADDRESS\r\n  )[0];\r\n};\r\n\r\n/**\r\n * Convenience method to find the stake entry id.\r\n * @returns\r\n */\r\nexport const findStakeEntryId = (\r\n  wallet: PublicKey,\r\n  stakePoolId: PublicKey,\r\n  originalMintId: PublicKey,\r\n  isFungible: boolean\r\n): PublicKey => {\r\n  return PublicKey.findProgramAddressSync(\r\n    [\r\n      utils.bytes.utf8.encode(STAKE_ENTRY_SEED),\r\n      stakePoolId.toBuffer(),\r\n      originalMintId.toBuffer(),\r\n      isFungible ? wallet.toBuffer() : PublicKey.default.toBuffer(),\r\n    ],\r\n    STAKE_POOL_ADDRESS\r\n  )[0];\r\n};\r\n\r\n/**\r\n * Finds the identifier id.\r\n * @returns\r\n */\r\nexport const findIdentifierId = (): PublicKey => {\r\n  return PublicKey.findProgramAddressSync(\r\n    [utils.bytes.utf8.encode(IDENTIFIER_SEED)],\r\n    STAKE_POOL_ADDRESS\r\n  )[0];\r\n};\r\n\r\n/**\r\n * Find stake authorization id.\r\n * @returns\r\n */\r\nexport const findStakeAuthorizationId = (\r\n  stakePoolId: PublicKey,\r\n  mintId: PublicKey\r\n): PublicKey => {\r\n  return PublicKey.findProgramAddressSync(\r\n    [\r\n      utils.bytes.utf8.encode(STAKE_AUTHORIZATION_SEED),\r\n      stakePoolId.toBuffer(),\r\n      mintId.toBuffer(),\r\n    ],\r\n    STAKE_POOL_ADDRESS\r\n  )[0];\r\n};\r\n\r\n/**\r\n * Find stake booster id.\r\n * @returns\r\n */\r\nexport const findStakeBoosterId = (\r\n  stakePoolId: PublicKey,\r\n  identifier?: BN\r\n): PublicKey => {\r\n  return PublicKey.findProgramAddressSync(\r\n    [\r\n      utils.bytes.utf8.encode(STAKE_BOOSTER_SEED),\r\n      stakePoolId.toBuffer(),\r\n      (identifier ?? new BN(0)).toArrayLike(Buffer, \"le\", 8),\r\n    ],\r\n    STAKE_POOL_ADDRESS\r\n  )[0];\r\n};\r\n\r\n/**\r\n * Convenience method to find the stake entry id.\r\n * @returns\r\n */\r\nexport const findGroupEntryId = (id: PublicKey): PublicKey => {\r\n  return PublicKey.findProgramAddressSync(\r\n    [utils.bytes.utf8.encode(GROUP_ENTRY_SEED), id.toBuffer()],\r\n    STAKE_POOL_ADDRESS\r\n  )[0];\r\n};\r\n"]}