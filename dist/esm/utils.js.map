{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,EAAE,EAAE,MAAM,mBAAmB,CAAC;AAEvC,OAAO,EACL,UAAU,EACV,6BAA6B,EAC7B,OAAO,GACR,MAAM,mBAAmB,CAAC;AAS3B,OAAO,EAAE,4BAA4B,EAAE,MAAM,iBAAiB,CAAC;AAM/D,OAAO,EAAE,gBAAgB,EAAE,MAAM,uCAAuC,CAAC;AACzE,OAAO,EAAE,iBAAiB,EAAE,MAAM,kCAAkC,CAAC;AAErE,OAAO,EAAE,eAAe,EAAE,MAAM,+BAA+B,CAAC;AAChE,OAAO,EAAE,wBAAwB,EAAE,MAAM,4BAA4B,CAAC;AAEtE,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,EACrC,UAAsB,EACtB,MAAc,EACd,WAAwB,EACxB,MAKC,EACgB,EAAE;IACnB,IAAI,IAAI,GAAG,EAAE,CAAC;IACd,IAAI;QACF,WAAW,CAAC,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC;QACxC,WAAW,CAAC,eAAe,GAAG,CAC5B,MAAM,UAAU,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAC3C,CAAC,SAAS,CAAC;QACZ,WAAW,GAAG,MAAM,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;QACxD,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YAC/C,WAAW,CAAC,WAAW,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;SAC5C;QACD,IAAI,GAAG,MAAM,4BAA4B,CACvC,UAAU,EACV,WAAW,CAAC,SAAS,EAAE,EACvB,MAAM,CAAC,cAAc,CACtB,CAAC;QACF,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KAC1C;IAAC,OAAO,CAAU,EAAE;QACnB,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAG,CAA0B,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QACzE,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC1C,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;YAClB,MAAM,CAAC,CAAC;SACT;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,KAAK,EAChC,UAA2B,EAC3B,cAA8B,EACjB,EAAE;IACf,OAAO,IAAI,EAAE,CAAC,CAAC,MAAM,OAAO,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC/E,CAAC,CAAC;AAEF;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,wBAAwB,GAAG,KAAK,EAC3C,UAAsB,EACtB,MAAiB,EACjB,OAAoB,EACpB,iBAAqD,EACrD,MAAc,EAMb,EAAE;IACH,MAAM,6BAA6B,GAAG,6BAA6B,CACjE,iBAAiB,CAAC,MAAM,CAAC,UAAU,EACnC,iBAAiB,CAAC,MAAM,EACxB,IAAI,CACL,CAAC;IACF,MAAM,iCAAiC,GAAG,MAAM,UAAU,CACxD,UAAU,EACV,6BAA6B,CAC9B,CAAC;IAEF,MAAM,aAAa,GAAgB,MAAM,OAAO,CAAC,GAAG,CAClD,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,CAC3B,wBAAwB,CACtB,UAAU,EACV,MAAM,EACN,iBAAiB,CAAC,MAAM,CAAC,SAAS,EAClC,MAAM,CACP,CACF,CACF,CAAC;IAEF,MAAM,cAAc,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAE,CACxD,iBAAiB,CAAC,iBAAiB,CAAC,MAAM,EAAE,YAAY,CAAC,CAC1D,CAAC;IAEF,MAAM,CAAC,YAAY,EAAE,aAAa,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;QACtD,eAAe,CAAC,UAAU,EAAE,aAAa,CAAC;QAC1C,gBAAgB,CAAC,UAAU,EAAE,cAAc,CAAC;KAC7C,CAAC,CAAC;IAEH,OAAO,YAAY,CACjB,YAAY,EACZ,aAAa,EACb,iBAAiB,EACjB,IAAI,EAAE,CAAC,iCAAiC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,EAC3D,MAAM,CACP,CAAC;AACJ,CAAC,CAAC;AAEF;;;;;;;;GAQG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,CAC1B,YAA2C,EAC3C,aAA6C,EAC7C,iBAAqD,EACrD,qBAAyB,EACzB,MAAc,EAMd,EAAE;IACF,MAAM,SAAS,GAEX,EAAE,CAAC;IAEP,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC5C,MAAM,UAAU,GAAG,YAAY,CAAC,CAAC,CAAE,CAAC;QACpC,MAAM,WAAW,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,EAAE,WACrD,OAAA,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM,0CAAE,UAAU,CAAC,MAAM,CAAC,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,MAAM,CAAC,CAAA,EAAA,CAC3D,CAAC;QAEF,IAAI,UAAU,EAAE;YACd,MAAM,CAAC,gBAAgB,EAAE,aAAa,CAAC,GAAG,uBAAuB,CAC/D,iBAAiB,EACjB,UAAU,EACV,WAAW,EACX,qBAAqB,EACrB,MAAM,CACP,CAAC;YACF,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,GAAG;gBACxC,gBAAgB;gBAChB,aAAa;aACd,CAAC;SACH;KACF;IAED,2BAA2B;IAC3B,IAAI,gBAAgB,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,CACpD,CAAC,GAAG,EAAE,EAAE,gBAAgB,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,gBAAgB,CAAC,EACxD,IAAI,EAAE,CAAC,CAAC,CAAC,CACV,CAAC;IACF,IACE,iBAAiB,CAAC,MAAM,CAAC,SAAS;QAClC,iBAAiB,CAAC,MAAM,CAAC,aAAa;aACnC,GAAG,CAAC,gBAAgB,CAAC;aACrB,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAAC,SAAS,CAAC,EAC1C;QACA,gBAAgB,GAAG,iBAAiB,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CACvD,iBAAiB,CAAC,MAAM,CAAC,aAAa,CACvC,CAAC;KACH;IAED,IAAI,gBAAgB,CAAC,EAAE,CAAC,qBAAqB,CAAC,EAAE;QAC9C,gBAAgB,GAAG,qBAAqB,CAAC;KAC1C;IACD,OAAO,EAAE,SAAS,EAAE,gBAAgB,EAAE,CAAC;AACzC,CAAC,CAAC;AAEF;;;;;;;;GAQG;AACH,MAAM,CAAC,MAAM,uBAAuB,GAAG,CACrC,iBAAqD,EACrD,UAAuC,EACvC,WAAqD,EACrD,qBAAyB,EACzB,MAAc,EACJ,EAAE;;IACZ,IACE,CAAC,UAAU;QACX,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE;YACjC,iBAAiB,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,EAC7C;QACA,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;KAC/B;IAED,MAAM,qBAAqB,GACzB,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM,CAAC,qBAAqB,KAAI,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IACzD,MAAM,UAAU,GACd,CAAA,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM,0CAAE,UAAU;QAC/B,iBAAiB,CAAC,MAAM,CAAC,iBAAiB,CAAC;IAE7C,IAAI,aAAa,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,oBAAoB,IAAI,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC;SAC3E,GAAG,CAAC,MAAA,UAAU,CAAC,MAAM,CAAC,aAAa,mCAAI,UAAU,CAAC,MAAM,CAAC,YAAY,CAAC;SACtE,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC;SAC7B,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;IAC5C,IAAI,iBAAiB,CAAC,MAAM,CAAC,wBAAwB,EAAE;QACrD,aAAa,GAAG,EAAE,CAAC,GAAG,CACpB,aAAa,EACb,iBAAiB,CAAC,MAAM,CAAC,wBAAwB,CAClD,CAAC;KACH;IACD,IAAI,qBAAqB,GAAG,aAAa;SACtC,GAAG,CAAC,qBAAqB,CAAC;SAC1B,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAAC,qBAAqB,CAAC;SACnD,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAAC,YAAY,CAAC;SAC1C,GAAG,CAAC,UAAU,CAAC;SACf,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,iBAAiB,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;IAE5E,IACE,iBAAiB,CAAC,MAAM,CAAC,SAAS;QAClC,iBAAiB,CAAC,MAAM,CAAC,aAAa;aACnC,GAAG,CAAC,qBAAqB,CAAC;aAC1B,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAAC,SAAS,CAAC,EAC1C;QACA,qBAAqB,GAAG,iBAAiB,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAC5D,iBAAiB,CAAC,MAAM,CAAC,aAAa,CACvC,CAAC;KACH;IAED,IAAI,qBAAqB,CAAC,EAAE,CAAC,qBAAqB,CAAC,EAAE;QACnD,qBAAqB,GAAG,qBAAqB,CAAC;KAC/C;IAED,MAAM,aAAa,GAAG,iBAAiB,CAAC,MAAM,CAAC,qBAAqB,CAAC,GAAG,CACtE,CAAC,UAAU,CAAC,MAAM,CAAC,oBAAoB,IAAI,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC;SACvD,GAAG,CAAC,MAAA,UAAU,CAAC,MAAM,CAAC,aAAa,mCAAI,UAAU,CAAC,MAAM,CAAC,YAAY,CAAC;SACtE,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,iBAAiB,CAAC;SACxC,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAAC,qBAAqB,CAAC,CACvD,CAAC;IAEF,OAAO,CAAC,qBAAqB,EAAE,aAAa,CAAC,CAAC;AAChD,CAAC,CAAC","sourcesContent":["import type { AccountData } from \"@cardinal/common\";\r\nimport type { web3 } from \"@coral-xyz/anchor\";\r\nimport { BN } from \"@coral-xyz/anchor\";\r\nimport type { Wallet } from \"@coral-xyz/anchor/dist/cjs/provider\";\r\nimport {\r\n  getAccount,\r\n  getAssociatedTokenAddressSync,\r\n  getMint,\r\n} from \"@solana/spl-token\";\r\nimport type {\r\n  ConfirmOptions,\r\n  Connection,\r\n  PublicKey,\r\n  SendTransactionError,\r\n  Signer,\r\n  Transaction,\r\n} from \"@solana/web3.js\";\r\nimport { sendAndConfirmRawTransaction } from \"@solana/web3.js\";\r\n\r\nimport type {\r\n  RewardDistributorData,\r\n  RewardEntryData,\r\n} from \"./programs/rewardDistributor\";\r\nimport { getRewardEntries } from \"./programs/rewardDistributor/accounts\";\r\nimport { findRewardEntryId } from \"./programs/rewardDistributor/pda\";\r\nimport type { StakeEntryData } from \"./programs/stakePool\";\r\nimport { getStakeEntries } from \"./programs/stakePool/accounts\";\r\nimport { findStakeEntryIdFromMint } from \"./programs/stakePool/utils\";\r\n\r\nexport const executeTransaction = async (\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  transaction: Transaction,\r\n  config: {\r\n    silent?: boolean;\r\n    signers?: Signer[];\r\n    confirmOptions?: ConfirmOptions;\r\n    callback?: (success: boolean) => void;\r\n  }\r\n): Promise<string> => {\r\n  let txid = \"\";\r\n  try {\r\n    transaction.feePayer = wallet.publicKey;\r\n    transaction.recentBlockhash = (\r\n      await connection.getRecentBlockhash(\"max\")\r\n    ).blockhash;\r\n    transaction = await wallet.signTransaction(transaction);\r\n    if (config.signers && config.signers.length > 0) {\r\n      transaction.partialSign(...config.signers);\r\n    }\r\n    txid = await sendAndConfirmRawTransaction(\r\n      connection,\r\n      transaction.serialize(),\r\n      config.confirmOptions\r\n    );\r\n    config.callback && config.callback(true);\r\n  } catch (e: unknown) {\r\n    console.log(\"Failed transaction: \", (e as SendTransactionError).logs, e);\r\n    config.callback && config.callback(false);\r\n    if (!config.silent) {\r\n      throw e;\r\n    }\r\n  }\r\n  return txid;\r\n};\r\n\r\n/**\r\n * Get total supply of mint\r\n * @param connection\r\n * @param originalMintId\r\n * @returns\r\n */\r\nexport const getMintSupply = async (\r\n  connection: web3.Connection,\r\n  originalMintId: web3.PublicKey\r\n): Promise<BN> => {\r\n  return new BN((await getMint(connection, originalMintId)).supply.toString());\r\n};\r\n\r\n/**\r\n * Get pending rewards of mintIds for a given reward distributor\r\n * @param connection\r\n * @param wallet\r\n * @param mintIds\r\n * @param rewardDistributor\r\n * @returns\r\n */\r\nexport const getPendingRewardsForPool = async (\r\n  connection: Connection,\r\n  wallet: PublicKey,\r\n  mintIds: PublicKey[],\r\n  rewardDistributor: AccountData<RewardDistributorData>,\r\n  UTCNow: number\r\n): Promise<{\r\n  rewardMap: {\r\n    [mintId: string]: { claimableRewards: BN; nextRewardsIn: BN };\r\n  };\r\n  claimableRewards: BN;\r\n}> => {\r\n  const rewardDistributorTokenAccount = getAssociatedTokenAddressSync(\r\n    rewardDistributor.parsed.rewardMint,\r\n    rewardDistributor.pubkey,\r\n    true\r\n  );\r\n  const rewardDistributorTokenAccountInfo = await getAccount(\r\n    connection,\r\n    rewardDistributorTokenAccount\r\n  );\r\n\r\n  const stakeEntryIds: PublicKey[] = await Promise.all(\r\n    mintIds.map(async (mintId) =>\r\n      findStakeEntryIdFromMint(\r\n        connection,\r\n        wallet,\r\n        rewardDistributor.parsed.stakePool,\r\n        mintId\r\n      )\r\n    )\r\n  );\r\n\r\n  const rewardEntryIds = stakeEntryIds.map((stakeEntryId) =>\r\n    findRewardEntryId(rewardDistributor.pubkey, stakeEntryId)\r\n  );\r\n\r\n  const [stakeEntries, rewardEntries] = await Promise.all([\r\n    getStakeEntries(connection, stakeEntryIds),\r\n    getRewardEntries(connection, rewardEntryIds),\r\n  ]);\r\n\r\n  return getRewardMap(\r\n    stakeEntries,\r\n    rewardEntries,\r\n    rewardDistributor,\r\n    new BN(rewardDistributorTokenAccountInfo.amount.toString()),\r\n    UTCNow\r\n  );\r\n};\r\n\r\n/**\r\n * Get the map of rewards for stakeEntry to rewards and next reward time\r\n * Also return the total claimable rewards from this map\r\n * @param stakeEntries\r\n * @param rewardEntries\r\n * @param rewardDistributor\r\n * @param remainingRewardAmount\r\n * @returns\r\n */\r\nexport const getRewardMap = (\r\n  stakeEntries: AccountData<StakeEntryData>[],\r\n  rewardEntries: AccountData<RewardEntryData>[],\r\n  rewardDistributor: AccountData<RewardDistributorData>,\r\n  remainingRewardAmount: BN,\r\n  UTCNow: number\r\n): {\r\n  rewardMap: {\r\n    [stakeEntryId: string]: { claimableRewards: BN; nextRewardsIn: BN };\r\n  };\r\n  claimableRewards: BN;\r\n} => {\r\n  const rewardMap: {\r\n    [stakeEntryId: string]: { claimableRewards: BN; nextRewardsIn: BN };\r\n  } = {};\r\n\r\n  for (let i = 0; i < stakeEntries.length; i++) {\r\n    const stakeEntry = stakeEntries[i]!;\r\n    const rewardEntry = rewardEntries.find((rewardEntry) =>\r\n      rewardEntry?.parsed?.stakeEntry.equals(stakeEntry?.pubkey)\r\n    );\r\n\r\n    if (stakeEntry) {\r\n      const [claimableRewards, nextRewardsIn] = calculatePendingRewards(\r\n        rewardDistributor,\r\n        stakeEntry,\r\n        rewardEntry,\r\n        remainingRewardAmount,\r\n        UTCNow\r\n      );\r\n      rewardMap[stakeEntry.pubkey.toString()] = {\r\n        claimableRewards,\r\n        nextRewardsIn,\r\n      };\r\n    }\r\n  }\r\n\r\n  // Compute too many rewards\r\n  let claimableRewards = Object.values(rewardMap).reduce(\r\n    (acc, { claimableRewards }) => acc.add(claimableRewards),\r\n    new BN(0)\r\n  );\r\n  if (\r\n    rewardDistributor.parsed.maxSupply &&\r\n    rewardDistributor.parsed.rewardsIssued\r\n      .add(claimableRewards)\r\n      .gte(rewardDistributor.parsed.maxSupply)\r\n  ) {\r\n    claimableRewards = rewardDistributor.parsed.maxSupply.sub(\r\n      rewardDistributor.parsed.rewardsIssued\r\n    );\r\n  }\r\n\r\n  if (claimableRewards.gt(remainingRewardAmount)) {\r\n    claimableRewards = remainingRewardAmount;\r\n  }\r\n  return { rewardMap, claimableRewards };\r\n};\r\n\r\n/**\r\n * Calculate claimable rewards and next reward time for a give mint and reward and stake entry\r\n * @param rewardDistributor\r\n * @param stakeEntry\r\n * @param rewardEntry\r\n * @param remainingRewardAmount\r\n * @param UTCNow\r\n * @returns\r\n */\r\nexport const calculatePendingRewards = (\r\n  rewardDistributor: AccountData<RewardDistributorData>,\r\n  stakeEntry: AccountData<StakeEntryData>,\r\n  rewardEntry: AccountData<RewardEntryData> | undefined,\r\n  remainingRewardAmount: BN,\r\n  UTCNow: number\r\n): [BN, BN] => {\r\n  if (\r\n    !stakeEntry ||\r\n    stakeEntry.parsed.pool.toString() !==\r\n    rewardDistributor.parsed.stakePool.toString()\r\n  ) {\r\n    return [new BN(0), new BN(0)];\r\n  }\r\n\r\n  const rewardSecondsReceived =\r\n    rewardEntry?.parsed.rewardSecondsReceived || new BN(0);\r\n  const multiplier =\r\n    rewardEntry?.parsed?.multiplier ||\r\n    rewardDistributor.parsed.defaultMultiplier;\r\n\r\n  let rewardSeconds = (stakeEntry.parsed.cooldownStartSeconds || new BN(UTCNow))\r\n    .sub(stakeEntry.parsed.lastUpdatedAt ?? stakeEntry.parsed.lastStakedAt)\r\n    .mul(stakeEntry.parsed.amount)\r\n    .add(stakeEntry.parsed.totalStakeSeconds);\r\n  if (rewardDistributor.parsed.maxRewardSecondsReceived) {\r\n    rewardSeconds = BN.min(\r\n      rewardSeconds,\r\n      rewardDistributor.parsed.maxRewardSecondsReceived\r\n    );\r\n  }\r\n  let rewardAmountToReceive = rewardSeconds\r\n    .sub(rewardSecondsReceived)\r\n    .div(rewardDistributor.parsed.rewardDurationSeconds)\r\n    .mul(rewardDistributor.parsed.rewardAmount)\r\n    .mul(multiplier)\r\n    .div(new BN(10).pow(new BN(rewardDistributor.parsed.multiplierDecimals)));\r\n\r\n  if (\r\n    rewardDistributor.parsed.maxSupply &&\r\n    rewardDistributor.parsed.rewardsIssued\r\n      .add(rewardAmountToReceive)\r\n      .gte(rewardDistributor.parsed.maxSupply)\r\n  ) {\r\n    rewardAmountToReceive = rewardDistributor.parsed.maxSupply.sub(\r\n      rewardDistributor.parsed.rewardsIssued\r\n    );\r\n  }\r\n\r\n  if (rewardAmountToReceive.gt(remainingRewardAmount)) {\r\n    rewardAmountToReceive = remainingRewardAmount;\r\n  }\r\n\r\n  const nextRewardsIn = rewardDistributor.parsed.rewardDurationSeconds.sub(\r\n    (stakeEntry.parsed.cooldownStartSeconds || new BN(UTCNow))\r\n      .sub(stakeEntry.parsed.lastUpdatedAt ?? stakeEntry.parsed.lastStakedAt)\r\n      .add(stakeEntry.parsed.totalStakeSeconds)\r\n      .mod(rewardDistributor.parsed.rewardDurationSeconds)\r\n  );\r\n\r\n  return [rewardAmountToReceive, nextRewardsIn];\r\n};\r\n"]}