{"version":3,"file":"api.js","sourceRoot":"","sources":["../../src/api.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  decodeIdlAccount,\r\n  fetchAccountDataById,\r\n  findMintEditionId,\r\n  findMintMetadataId,\r\n  findTokenRecordId,\r\n  getBatchedMultipleAccounts,\r\n  METADATA_PROGRAM_ID,\r\n  tryDecodeIdlAccount,\r\n  tryGetAccount,\r\n  tryNull,\r\n} from \"@cardinal/common\";\r\nimport { BN } from \"@coral-xyz/anchor\";\r\nimport type { Wallet } from \"@coral-xyz/anchor/dist/cjs/provider\";\r\nimport { PROGRAM_ID as TOKEN_AUTH_RULES_ID } from \"@metaplex-foundation/mpl-token-auth-rules\";\r\nimport {\r\n  Metadata,\r\n  TokenDelegateRole,\r\n  TokenRecord,\r\n  TokenStandard,\r\n} from \"@metaplex-foundation/mpl-token-metadata\";\r\nimport type { Account } from \"@solana/spl-token\";\r\nimport {\r\n  ASSOCIATED_TOKEN_PROGRAM_ID,\r\n  createAssociatedTokenAccountIdempotentInstruction,\r\n  getAccount,\r\n  getAssociatedTokenAddressSync,\r\n  TOKEN_PROGRAM_ID,\r\n} from \"@solana/spl-token\";\r\nimport type { Connection, PublicKey, Signer } from \"@solana/web3.js\";\r\nimport {\r\n  ComputeBudgetProgram,\r\n  Keypair,\r\n  SystemProgram,\r\n  SYSVAR_INSTRUCTIONS_PUBKEY,\r\n  SYSVAR_RENT_PUBKEY,\r\n  Transaction,\r\n} from \"@solana/web3.js\";\r\nimport { tokenManager } from \"cardinal-token-manager/dist/cjs/programs\";\r\nimport {\r\n  CRANK_KEY,\r\n  getRemainingAccountsForKind,\r\n  TOKEN_MANAGER_ADDRESS,\r\n  TokenManagerKind,\r\n  withRemainingAccountsForInvalidate,\r\n} from \"cardinal-token-manager/dist/cjs/programs/tokenManager\";\r\nimport {\r\n  findMintCounterId,\r\n  findTokenManagerAddress,\r\n} from \"cardinal-token-manager/dist/cjs/programs/tokenManager/pda\";\r\n\r\nimport type { CardinalRewardDistributor } from \"./idl/cardinal_reward_distributor\";\r\nimport type { CardinalStakePool } from \"./idl/cardinal_stake_pool\";\r\nimport type { RewardDistributorKind } from \"./programs/rewardDistributor\";\r\nimport {\r\n  REWARD_DISTRIBUTOR_IDL,\r\n  REWARD_MANAGER,\r\n  rewardDistributorProgram,\r\n} from \"./programs/rewardDistributor\";\r\nimport {\r\n  getRewardDistributor,\r\n  getRewardEntry,\r\n} from \"./programs/rewardDistributor/accounts\";\r\nimport {\r\n  findRewardDistributorId,\r\n  findRewardEntryId,\r\n} from \"./programs/rewardDistributor/pda\";\r\nimport {\r\n  withInitRewardDistributor,\r\n  withInitRewardEntry,\r\n  withUpdateRewardEntry,\r\n} from \"./programs/rewardDistributor/transaction\";\r\nimport {\r\n  ReceiptType,\r\n  // STAKE_POOL_ADDRESS,\r\n  STAKE_POOL_IDL,\r\n  stakePoolProgram,\r\n} from \"./programs/stakePool\";\r\nimport {\r\n  getStakeEntry,\r\n  getStakePool,\r\n} from \"./programs/stakePool/accounts\";\r\nimport { findStakeEntryId } from \"./programs/stakePool/pda\";\r\nimport {\r\n  withAuthorizeStakeEntry,\r\n  withInitStakeEntry,\r\n  withInitStakeMint,\r\n  withInitStakePool,\r\n  withUpdateTotalStakeSeconds,\r\n} from \"./programs/stakePool/transaction\";\r\nimport {\r\n  findStakeEntryIdFromMint,\r\n  remainingAccountsForInitStakeEntry,\r\n  shouldReturnReceipt,\r\n} from \"./programs/stakePool/utils\";\r\n\r\n/**\r\n * Convenience call to create a stake pool\r\n * @param connection - Connection to use\r\n * @param wallet - Wallet to use\r\n * @param requiresCollections - (Optional) List of required collections pubkeys\r\n * @param requiresCreators - (Optional) List of required creators pubkeys\r\n * @param requiresAuthorization - (Optional) Boolean to require authorization\r\n * @param overlayText - (Optional) Text to overlay on receipt mint tokens\r\n * @param imageUri - (Optional) Image URI for stake pool\r\n * @param resetOnStake - (Optional) Boolean to reset an entry's total stake seconds on unstake\r\n * @param cooldownSeconds - (Optional) Number of seconds for token to cool down before returned to the staker\r\n * @param rewardDistributor - (Optional) Parameters to creat reward distributor\r\n * @returns\r\n */\r\nexport const createStakePool = async (\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    requiresCollections?: PublicKey[];\r\n    requiresCreators?: PublicKey[];\r\n    requiresAuthorization?: boolean;\r\n    overlayText?: string;\r\n    imageUri?: string;\r\n    resetOnStake?: boolean;\r\n    cooldownSeconds?: number;\r\n    minStakeSeconds?: number;\r\n    endDate?: BN;\r\n    doubleOrResetEnabled?: boolean;\r\n    rewardDistributor?: {\r\n      rewardMintId: PublicKey;\r\n      rewardAmount?: BN;\r\n      rewardDurationSeconds?: BN;\r\n      rewardDistributorKind?: RewardDistributorKind;\r\n      maxSupply?: BN;\r\n      supply?: BN;\r\n    };\r\n  }\r\n): Promise<[Transaction, PublicKey, PublicKey?]> => {\r\n  const transaction = new Transaction();\r\n\r\n  const [, stakePoolId] = await withInitStakePool(\r\n    transaction,\r\n    connection,\r\n    wallet,\r\n    params\r\n  );\r\n  let rewardDistributorId;\r\n  if (params.rewardDistributor) {\r\n    [, rewardDistributorId] = await withInitRewardDistributor(\r\n      transaction,\r\n      connection,\r\n      wallet,\r\n      {\r\n        stakePoolId: stakePoolId,\r\n        rewardMintId: params.rewardDistributor.rewardMintId,\r\n        rewardAmount: params.rewardDistributor.rewardAmount,\r\n        rewardDurationSeconds: params.rewardDistributor.rewardDurationSeconds,\r\n        kind: params.rewardDistributor.rewardDistributorKind,\r\n        maxSupply: params.rewardDistributor.maxSupply,\r\n        supply: params.rewardDistributor.supply,\r\n      }\r\n    );\r\n  }\r\n  return [transaction, stakePoolId, rewardDistributorId];\r\n};\r\n\r\n/**\r\n * Convenience call to create a reward distributor\r\n * @param connection - Connection to use\r\n * @param wallet - Wallet to use\r\n * @param rewardMintId - (Optional) Reward mint id\r\n * @param rewardAmount - (Optional) Reward amount\r\n * @param rewardDurationSeconds - (Optional) Reward duration in seconds\r\n * @param rewardDistributorKind - (Optional) Reward distributor kind Mint or Treasury\r\n * @param maxSupply - (Optional) Max supply\r\n * @param supply - (Optional) Supply\r\n * @returns\r\n */\r\nexport const createRewardDistributor = async (\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    rewardMintId: PublicKey;\r\n    rewardAmount?: BN;\r\n    rewardDurationSeconds?: BN;\r\n    kind?: RewardDistributorKind;\r\n    maxSupply?: BN;\r\n    supply?: BN;\r\n  }\r\n): Promise<[Transaction, PublicKey]> =>\r\n  withInitRewardDistributor(new Transaction(), connection, wallet, params);\r\n\r\n/**\r\n * Convenience call to create a stake entry\r\n * @param connection - Connection to use\r\n * @param wallet - Wallet to use\r\n * @param stakePoolId - Stake pool ID\r\n * @param originalMintId - Original mint ID\r\n * @param user - (Optional) User pubkey in case the person paying for the transaction and\r\n * stake entry owner are different\r\n * @returns\r\n */\r\nexport const createStakeEntry = async (\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    originalMintId: PublicKey;\r\n  }\r\n): Promise<[Transaction, PublicKey]> => {\r\n  const stakeEntryId = await findStakeEntryIdFromMint(\r\n    connection,\r\n    wallet.publicKey,\r\n    params.stakePoolId,\r\n    params.originalMintId\r\n  );\r\n  return [\r\n    await withInitStakeEntry(new Transaction(), connection, wallet, {\r\n      stakePoolId: params.stakePoolId,\r\n      stakeEntryId,\r\n      originalMintId: params.originalMintId,\r\n    }),\r\n    stakeEntryId,\r\n  ];\r\n};\r\n\r\n/**\r\n * Convenience call to create a stake entry\r\n * @param connection - Connection to use\r\n * @param wallet - Wallet to use\r\n * @param stakePoolId - Stake pool ID\r\n * @param originalMintId - Original mint ID\r\n * @returns\r\n */\r\nexport const initializeRewardEntry = async (\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    originalMintId: PublicKey;\r\n    multiplier?: BN;\r\n  }\r\n): Promise<Transaction> => {\r\n  const stakeEntryId = await findStakeEntryIdFromMint(\r\n    connection,\r\n    wallet.publicKey,\r\n    params.stakePoolId,\r\n    params.originalMintId\r\n  );\r\n  const stakeEntryData = await tryGetAccount(() =>\r\n    getStakeEntry(connection, stakeEntryId)\r\n  );\r\n\r\n  const transaction = new Transaction();\r\n  if (!stakeEntryData) {\r\n    await withInitStakeEntry(transaction, connection, wallet, {\r\n      stakePoolId: params.stakePoolId,\r\n      stakeEntryId,\r\n      originalMintId: params.originalMintId,\r\n    });\r\n  }\r\n\r\n  const rewardDistributorId = findRewardDistributorId(params.stakePoolId);\r\n  await withInitRewardEntry(transaction, connection, wallet, {\r\n    stakeEntryId: stakeEntryId,\r\n    rewardDistributorId: rewardDistributorId,\r\n  });\r\n\r\n  await withUpdateRewardEntry(transaction, connection, wallet, {\r\n    stakePoolId: params.stakePoolId,\r\n    rewardDistributorId: rewardDistributorId,\r\n    stakeEntryId: stakeEntryId,\r\n    multiplier: params.multiplier ?? new BN(1), //TODO default multiplier\r\n  });\r\n  return transaction;\r\n};\r\n\r\n/**\r\n * Convenience call to authorize a stake entry\r\n * @param connection - Connection to use\r\n * @param wallet - Wallet to use\r\n * @param stakePoolId - Stake pool ID\r\n * @param originalMintId - Original mint ID\r\n * @returns\r\n */\r\nexport const authorizeStakeEntry = (\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    originalMintId: PublicKey;\r\n  }\r\n) => {\r\n  return withAuthorizeStakeEntry(new Transaction(), connection, wallet, {\r\n    stakePoolId: params.stakePoolId,\r\n    originalMintId: params.originalMintId,\r\n  });\r\n};\r\n\r\n/**\r\n * Convenience call to create a stake entry and a stake mint\r\n * @param connection - Connection to use\r\n * @param wallet - Wallet to use\r\n * @param stakePoolId - Stake pool ID\r\n * @param originalMintId - Original mint ID\r\n * @param amount - (Optional) Amount of tokens to be staked, defaults to 1\r\n * @returns\r\n */\r\nexport const createStakeEntryAndStakeMint = async (\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    originalMintId: PublicKey;\r\n    receiptName?: string;\r\n  }\r\n): Promise<[Transaction, PublicKey, Keypair | undefined]> => {\r\n  let transaction = new Transaction();\r\n  const stakeEntryId = await findStakeEntryIdFromMint(\r\n    connection,\r\n    wallet.publicKey,\r\n    params.stakePoolId,\r\n    params.originalMintId\r\n  );\r\n  const stakeEntryData = await tryGetAccount(() =>\r\n    getStakeEntry(connection, stakeEntryId)\r\n  );\r\n  if (!stakeEntryData) {\r\n    transaction = (\r\n      await createStakeEntry(connection, wallet, {\r\n        stakePoolId: params.stakePoolId,\r\n        originalMintId: params.originalMintId,\r\n      })\r\n    )[0];\r\n  }\r\n\r\n  let stakeMintKeypair: Keypair | undefined;\r\n  if (!stakeEntryData?.parsed.stakeMint) {\r\n    stakeMintKeypair = Keypair.generate();\r\n    const stakePool = await getStakePool(connection, params.stakePoolId);\r\n\r\n    await withInitStakeMint(transaction, connection, wallet, {\r\n      stakePoolId: params.stakePoolId,\r\n      stakeEntryId: stakeEntryId,\r\n      originalMintId: params.originalMintId,\r\n      stakeMintKeypair,\r\n      name:\r\n        params.receiptName ??\r\n        `POOl${stakePool.parsed.identifier.toString()} RECEIPT`,\r\n      symbol: `POOl${stakePool.parsed.identifier.toString()}`,\r\n    });\r\n  }\r\n\r\n  return [transaction, stakeEntryId, stakeMintKeypair];\r\n};\r\n\r\n/**\r\n * Convenience method to claim rewards\r\n * @param connection - Connection to use\r\n * @param wallet - Wallet to use\r\n * @param stakePoolId - Stake pool id\r\n * @param stakeEntryId - Original mint id\r\n * @returns\r\n */\r\nexport const claimRewards = async (\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    stakeEntryIds: PublicKey[];\r\n    lastStaker?: PublicKey;\r\n    payer?: PublicKey;\r\n  }\r\n): Promise<Transaction[]> => {\r\n  /////// derive ids ///////\r\n  const rewardDistributorId = findRewardDistributorId(params.stakePoolId);\r\n  const rewardEntryIds = params.stakeEntryIds.map((stakeEntryId) =>\r\n    findRewardEntryId(rewardDistributorId, stakeEntryId)\r\n  );\r\n\r\n  /////// get accounts ///////\r\n  const rewardDistributorData = await tryNull(() =>\r\n    getRewardDistributor(connection, rewardDistributorId)\r\n  );\r\n  if (!rewardDistributorData) throw \"No reward distributor found\";\r\n  const rewardEntryInfos = await getBatchedMultipleAccounts(\r\n    connection,\r\n    rewardEntryIds\r\n  );\r\n\r\n  const rewardMintTokenAccountId = getAssociatedTokenAddressSync(\r\n    rewardDistributorData.parsed.rewardMint,\r\n    params.lastStaker ?? wallet.publicKey,\r\n    true\r\n  );\r\n  const txs: Transaction[] = [];\r\n  for (let i = 0; i < params.stakeEntryIds.length; i++) {\r\n    const stakeEntryId = params.stakeEntryIds[i]!;\r\n    const rewardEntryId = rewardEntryIds[i];\r\n    const tx = new Transaction();\r\n    /////// update seconds ///////\r\n    await withUpdateTotalStakeSeconds(tx, connection, wallet, {\r\n      stakeEntryId,\r\n      lastStaker: wallet.publicKey,\r\n    });\r\n    /////// init ata ///////\r\n    tx.add(\r\n      createAssociatedTokenAccountIdempotentInstruction(\r\n        params.payer ?? wallet.publicKey,\r\n        rewardMintTokenAccountId,\r\n        params.lastStaker ?? wallet.publicKey,\r\n        rewardDistributorData.parsed.rewardMint\r\n      )\r\n    );\r\n    /////// init entry ///////\r\n    if (!rewardEntryInfos[i]?.data) {\r\n      const ix = await rewardDistributorProgram(connection, wallet)\r\n        .methods.initRewardEntry()\r\n        .accounts({\r\n          rewardEntry: rewardEntryId,\r\n          stakeEntry: stakeEntryId,\r\n          rewardDistributor: rewardDistributorData.pubkey,\r\n          payer: params.payer ?? wallet.publicKey,\r\n          systemProgram: SystemProgram.programId,\r\n        })\r\n        .instruction();\r\n      tx.add(ix);\r\n    }\r\n    /////// claim rewards ///////\r\n    const ix = await rewardDistributorProgram(connection, wallet)\r\n      .methods.claimRewards()\r\n      .accounts({\r\n        rewardEntry: rewardEntryId,\r\n        rewardDistributor: rewardDistributorData.pubkey,\r\n        stakeEntry: stakeEntryId,\r\n        stakePool: params.stakePoolId,\r\n        rewardMint: rewardDistributorData.parsed.rewardMint,\r\n        userRewardMintTokenAccount: rewardMintTokenAccountId,\r\n        rewardManager: REWARD_MANAGER,\r\n        user: params.payer ?? wallet.publicKey,\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        systemProgram: SystemProgram.programId,\r\n      })\r\n      .remainingAccounts([\r\n        {\r\n          pubkey: getAssociatedTokenAddressSync(\r\n            rewardDistributorData.parsed.rewardMint,\r\n            rewardDistributorData.pubkey,\r\n            true\r\n          ),\r\n          isSigner: false,\r\n          isWritable: true,\r\n        },\r\n      ])\r\n      .instruction();\r\n    tx.add(ix);\r\n    txs.push(tx);\r\n  }\r\n  return txs;\r\n};\r\n\r\nexport const claimRewardsAll = async (\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    stakeEntryIds: PublicKey[];\r\n    lastStaker?: PublicKey;\r\n    payer?: PublicKey;\r\n  }\r\n): Promise<{ tx: Transaction }[][]> => {\r\n  /////// get accounts ///////\r\n  const rewardDistributorId = findRewardDistributorId(params.stakePoolId);\r\n  const rewardDistributorData = await getRewardDistributor(\r\n    connection,\r\n    rewardDistributorId\r\n  );\r\n  const rewardMintId = rewardDistributorData.parsed.rewardMint;\r\n  const userRewardTokenAccountId = getAssociatedTokenAddressSync(\r\n    rewardMintId,\r\n    wallet.publicKey,\r\n    true\r\n  );\r\n  const rewardTokenAccount = await tryNull(\r\n    getAccount(connection, userRewardTokenAccountId)\r\n  );\r\n  const txs = await claimRewards(connection, wallet, {\r\n    stakePoolId: params.stakePoolId,\r\n    stakeEntryIds: params.stakeEntryIds,\r\n    lastStaker: params.lastStaker,\r\n    payer: params.payer,\r\n  });\r\n  return !rewardTokenAccount\r\n    ? [\r\n      txs.slice(0, 1).map((tx) => {\r\n        tx.instructions = [\r\n          createAssociatedTokenAccountIdempotentInstruction(\r\n            wallet.publicKey,\r\n            userRewardTokenAccountId,\r\n            wallet.publicKey,\r\n            rewardMintId\r\n          ),\r\n          ...tx.instructions,\r\n        ];\r\n        return { tx };\r\n      }),\r\n      txs.slice(1).map((tx) => ({ tx })),\r\n    ]\r\n    : [txs.map((tx) => ({ tx }))];\r\n};\r\n\r\nexport const stake = async (\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    originalMintId: PublicKey;\r\n    userOriginalMintTokenAccountId: PublicKey;\r\n    amount?: BN;\r\n    fungible?: boolean;\r\n    receiptType?: ReceiptType;\r\n  }\r\n): Promise<Transaction> => {\r\n  const txSeq = await stakeAll(connection, wallet, {\r\n    stakePoolId: params.stakePoolId,\r\n    mintInfos: [\r\n      {\r\n        mintId: params.originalMintId,\r\n        tokenAccountId: params.userOriginalMintTokenAccountId,\r\n        receiptType: params.receiptType,\r\n        fungible:\r\n          params.fungible ?? (params.amount && params.amount.gt(new BN(1))),\r\n        amount: params.amount,\r\n      },\r\n    ],\r\n  });\r\n  const txs = txSeq[0];\r\n  if (!txs) throw \"Failed to unstake\";\r\n  const tx = txs[0];\r\n  if (!tx) throw \"Failed to unstake\";\r\n  return tx.tx;\r\n};\r\n\r\n/**\r\n * Convenience method to stake tokens\r\n * @param connection - Connection to use\r\n * @param wallet - Wallet to use\r\n * @param stakePoolId - Stake pool id\r\n * @param originalMintId - Original mint id\r\n * @param userOriginalMintTokenAccountId - User's original mint token account id\r\n * @param receiptType - (Optional) ReceiptType to be received back. If none provided, none will be claimed\r\n * @param user - (Optional) User pubkey in case the person paying for the transaction and\r\n * stake entry owner are different\r\n * @param amount - (Optional) Amount of tokens to be staked, defaults to 1\r\n * @returns\r\n */\r\nexport const stakeAll = async (\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    mintInfos: {\r\n      mintId: PublicKey;\r\n      tokenAccountId: PublicKey;\r\n      fungible?: boolean;\r\n      amount?: BN;\r\n      receiptType?: ReceiptType;\r\n    }[];\r\n  }\r\n): Promise<{ tx: Transaction; signers?: Signer[] }[][]> => {\r\n  /////// derive ids ///////\r\n  const mintMetadataIds = params.mintInfos.map(({ mintId }) =>\r\n    findMintMetadataId(mintId)\r\n  );\r\n  const mintInfos = params.mintInfos.map(({ mintId, fungible, ...rest }) => ({\r\n    ...rest,\r\n    mintId,\r\n    fungible,\r\n    stakeEntryId: findStakeEntryId(\r\n      wallet.publicKey,\r\n      params.stakePoolId,\r\n      mintId,\r\n      fungible ?? false\r\n    ),\r\n  }));\r\n  /////// get accounts ///////\r\n  const accountData = await fetchAccountDataById(connection, [\r\n    params.stakePoolId,\r\n    ...mintInfos.map(({ stakeEntryId }) => stakeEntryId),\r\n    ...mintMetadataIds,\r\n  ]);\r\n\r\n  /////// preTxs ///////\r\n  const preTxs: { tx: Transaction; signers: Signer[] }[] = [];\r\n  const mintInfosWithReceipts = mintInfos.filter(\r\n    (i) => i.receiptType === ReceiptType.Receipt\r\n  );\r\n  const mintReceiptIds: { [s: string]: PublicKey } = {};\r\n  if (mintInfosWithReceipts.length > 0) {\r\n    for (let i = 0; i < mintInfosWithReceipts.length; i++) {\r\n      const { mintId, stakeEntryId } = mintInfosWithReceipts[i]!;\r\n      const transaction = new Transaction();\r\n      const stakeEntryInfo = accountData[stakeEntryId.toString()] ?? null;\r\n      const stakeEntryData = stakeEntryInfo\r\n        ? tryDecodeIdlAccount<\"stakeEntry\", CardinalStakePool>(\r\n          stakeEntryInfo,\r\n          \"stakeEntry\",\r\n          STAKE_POOL_IDL\r\n        )\r\n        : null;\r\n\r\n      const stakePoolInfo = accountData[params.stakePoolId.toString()] ?? null;\r\n      if (!stakePoolInfo) throw \"Stake pool not found\";\r\n      const stakePoolData = decodeIdlAccount<\"stakePool\", CardinalStakePool>(\r\n        stakePoolInfo,\r\n        \"stakePool\",\r\n        STAKE_POOL_IDL\r\n      );\r\n      if (!stakeEntryInfo) {\r\n        const ix = await stakePoolProgram(connection, wallet)\r\n          .methods.initEntry(wallet.publicKey)\r\n          .accounts({\r\n            stakeEntry: stakeEntryId,\r\n            stakePool: params.stakePoolId,\r\n            originalMint: mintId,\r\n            originalMintMetadata: findMintMetadataId(mintId),\r\n            payer: wallet.publicKey,\r\n            systemProgram: SystemProgram.programId,\r\n          })\r\n          .remainingAccounts(\r\n            remainingAccountsForInitStakeEntry(params.stakePoolId, mintId)\r\n          )\r\n          .instruction();\r\n        transaction.add(ix);\r\n      }\r\n      let stakeMintKeypair: Keypair | undefined;\r\n      if (!stakeEntryData?.parsed?.stakeMint) {\r\n        stakeMintKeypair = Keypair.generate();\r\n        await withInitStakeMint(transaction, connection, wallet, {\r\n          stakePoolId: params.stakePoolId,\r\n          stakeEntryId: stakeEntryId,\r\n          originalMintId: mintId,\r\n          stakeMintKeypair,\r\n          name: `POOl${stakePoolData.parsed.identifier.toString()} RECEIPT`,\r\n          symbol: `POOl${stakePoolData.parsed.identifier.toString()}`,\r\n        });\r\n        if (transaction.instructions.length > 0) {\r\n          mintReceiptIds[mintId.toString()] = stakeMintKeypair.publicKey;\r\n          preTxs.push({ tx: transaction, signers: [stakeMintKeypair] });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const txs: { tx: Transaction }[] = [];\r\n  for (let i = 0; i < mintInfos.length; i++) {\r\n    const {\r\n      mintId: originalMintId,\r\n      tokenAccountId: userOriginalMintTokenAccountId,\r\n      amount,\r\n      receiptType,\r\n      stakeEntryId,\r\n    } = mintInfos[i]!;\r\n    const mintMetadataId = findMintMetadataId(originalMintId);\r\n    /////// deserialize accounts ///////\r\n    const metadataAccountInfo = accountData[mintMetadataId.toString()] ?? null;\r\n    const mintMetadata = metadataAccountInfo\r\n      ? Metadata.deserialize(metadataAccountInfo.data)[0]\r\n      : null;\r\n    const stakeEntryInfo = accountData[stakeEntryId.toString()] ?? null;\r\n    const stakeEntryData = stakeEntryInfo\r\n      ? tryDecodeIdlAccount<\"stakeEntry\", CardinalStakePool>(\r\n        stakeEntryInfo,\r\n        \"stakeEntry\",\r\n        STAKE_POOL_IDL\r\n      )\r\n      : null;\r\n    /////// start transaction ///////\r\n    const transaction = new Transaction();\r\n\r\n    /////// init entry ///////\r\n    if (!stakeEntryInfo) {\r\n      const ix = await stakePoolProgram(connection, wallet)\r\n        .methods.initEntry(wallet.publicKey)\r\n        .accounts({\r\n          stakeEntry: stakeEntryId,\r\n          stakePool: params.stakePoolId,\r\n          originalMint: originalMintId,\r\n          originalMintMetadata: mintMetadataId,\r\n          payer: wallet.publicKey,\r\n          systemProgram: SystemProgram.programId,\r\n        })\r\n        .remainingAccounts(\r\n          remainingAccountsForInitStakeEntry(params.stakePoolId, originalMintId)\r\n        )\r\n        .instruction();\r\n      transaction.add(ix);\r\n    }\r\n\r\n    if (\r\n      mintMetadata?.tokenStandard === TokenStandard.ProgrammableNonFungible\r\n      // && mintMetadata.programmableConfig?.ruleSet\r\n    ) {\r\n      transaction.add(\r\n        ComputeBudgetProgram.setComputeUnitLimit({\r\n          units: 100000000,\r\n        })\r\n      );\r\n      /////// programmable ///////\r\n      transaction.add(\r\n        await stakePoolProgram(connection, wallet)\r\n          .methods.stakeProgrammable(amount ?? new BN(1))\r\n          .accounts({\r\n            stakeEntry: stakeEntryId,\r\n            stakePool: params.stakePoolId,\r\n            originalMint: originalMintId,\r\n            systemProgram: SystemProgram.programId,\r\n            user: wallet.publicKey,\r\n            tokenProgram: TOKEN_PROGRAM_ID,\r\n            tokenMetadataProgram: METADATA_PROGRAM_ID,\r\n            userOriginalMintTokenAccount: userOriginalMintTokenAccountId,\r\n            userOriginalMintTokenRecord: findTokenRecordId(\r\n              originalMintId,\r\n              userOriginalMintTokenAccountId\r\n            ),\r\n            mintMetadata: mintMetadataId,\r\n            mintEdition: findMintEditionId(originalMintId),\r\n            sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,\r\n            authorizationRules:\r\n              mintMetadata.programmableConfig?.ruleSet ?? METADATA_PROGRAM_ID,\r\n            authorizationRulesProgram: TOKEN_AUTH_RULES_ID,\r\n          })\r\n          .instruction()\r\n      );\r\n    } else {\r\n      /////// non-programmable ///////\r\n      const stakeEntryOriginalMintTokenAccountId =\r\n        getAssociatedTokenAddressSync(originalMintId, stakeEntryId, true);\r\n      transaction.add(\r\n        createAssociatedTokenAccountIdempotentInstruction(\r\n          wallet.publicKey,\r\n          stakeEntryOriginalMintTokenAccountId,\r\n          stakeEntryId,\r\n          originalMintId\r\n        )\r\n      );\r\n      const ix = await stakePoolProgram(connection, wallet)\r\n        .methods.stake(amount || new BN(1))\r\n        .accounts({\r\n          stakeEntry: stakeEntryId,\r\n          stakePool: params.stakePoolId,\r\n          stakeEntryOriginalMintTokenAccount:\r\n            stakeEntryOriginalMintTokenAccountId,\r\n          originalMint: originalMintId,\r\n          user: wallet.publicKey,\r\n          userOriginalMintTokenAccount: userOriginalMintTokenAccountId,\r\n          tokenProgram: TOKEN_PROGRAM_ID,\r\n        })\r\n        .instruction();\r\n      transaction.add(ix);\r\n\r\n      /////// receipts ///////\r\n      if (receiptType && receiptType !== ReceiptType.None) {\r\n        const receiptMintId =\r\n          receiptType === ReceiptType.Receipt\r\n            ? mintReceiptIds[originalMintId.toString()] ??\r\n            stakeEntryData?.parsed?.stakeMint\r\n            : originalMintId;\r\n        if (!receiptMintId) {\r\n          throw \"Stake entry has no receipt mint and you are trying to stake using receipts. Initialize receipt mint first.\";\r\n        }\r\n        if (\r\n          stakeEntryData?.parsed?.stakeMintClaimed ||\r\n          stakeEntryData?.parsed?.originalMintClaimed\r\n        ) {\r\n          throw \"Receipt has already been claimed.\";\r\n        }\r\n        if (\r\n          !stakeEntryData?.parsed ||\r\n          stakeEntryData.parsed.amount.toNumber() === 0\r\n        ) {\r\n          const tokenManagerId = findTokenManagerAddress(receiptMintId);\r\n          const tokenManagerReceiptMintTokenAccountId =\r\n            getAssociatedTokenAddressSync(receiptMintId, tokenManagerId, true);\r\n          transaction.add(\r\n            createAssociatedTokenAccountIdempotentInstruction(\r\n              wallet.publicKey,\r\n              tokenManagerReceiptMintTokenAccountId,\r\n              tokenManagerId,\r\n              receiptMintId\r\n            )\r\n          );\r\n          const ix = await stakePoolProgram(connection, wallet)\r\n            .methods.claimReceiptMint()\r\n            .accounts({\r\n              stakeEntry: stakeEntryId,\r\n              originalMint: originalMintId,\r\n              receiptMint: receiptMintId,\r\n              stakeEntryReceiptMintTokenAccount: getAssociatedTokenAddressSync(\r\n                receiptMintId,\r\n                stakeEntryId,\r\n                true\r\n              ),\r\n              user: wallet.publicKey,\r\n              userReceiptMintTokenAccount: getAssociatedTokenAddressSync(\r\n                receiptMintId,\r\n                wallet.publicKey,\r\n                true\r\n              ),\r\n              tokenManagerReceiptMintTokenAccount:\r\n                tokenManagerReceiptMintTokenAccountId,\r\n              tokenManager: tokenManagerId,\r\n              mintCounter: findMintCounterId(receiptMintId),\r\n              tokenProgram: TOKEN_PROGRAM_ID,\r\n              tokenManagerProgram: TOKEN_MANAGER_ADDRESS,\r\n              associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\r\n              systemProgram: SystemProgram.programId,\r\n              rent: SYSVAR_RENT_PUBKEY,\r\n            })\r\n            .remainingAccounts(\r\n              getRemainingAccountsForKind(\r\n                receiptMintId,\r\n                receiptType === ReceiptType.Original\r\n                  ? TokenManagerKind.Edition\r\n                  : TokenManagerKind.Managed\r\n              )\r\n            )\r\n            .instruction();\r\n          transaction.add(ix);\r\n        }\r\n      }\r\n    }\r\n    txs.push({ tx: transaction });\r\n  }\r\n  return preTxs.length > 0 ? [preTxs, txs] : [txs];\r\n};\r\n\r\nexport const unstake = async (\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    originalMintId: PublicKey;\r\n    fungible?: boolean;\r\n    stakeEntryId?: PublicKey;\r\n  }\r\n): Promise<Transaction> => {\r\n  const txSeq = await unstakeAll(connection, wallet, {\r\n    stakePoolId: params.stakePoolId,\r\n    mintInfos: [\r\n      {\r\n        mintId: params.originalMintId,\r\n        fungible: params.fungible,\r\n        stakeEntryId: params.stakeEntryId,\r\n      },\r\n    ],\r\n  });\r\n  const txs = txSeq[0];\r\n  if (!txs) throw \"Failed to unstake\";\r\n  const tx = txs[0];\r\n  if (!tx) throw \"Failed to unstake\";\r\n  return tx.tx;\r\n};\r\n\r\n/**\r\n * Convenience method to unstake tokens\r\n * @param connection - Connection to use\r\n * @param wallet - Wallet to use\r\n * @param stakePoolId - Stake pool ID\r\n * @param originalMintId - Original mint ID\r\n * @returns\r\n */\r\nexport const unstakeAll = async (\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakePoolId: PublicKey;\r\n    mintInfos: {\r\n      mintId: PublicKey;\r\n      stakeEntryId?: PublicKey;\r\n      fungible?: boolean;\r\n    }[];\r\n  }\r\n): Promise<{ tx: Transaction; signers?: Signer[] }[][]> => {\r\n  /////// derive ids ///////\r\n  const mintInfos = params.mintInfos.map(\r\n    ({ mintId, fungible, stakeEntryId }) => ({\r\n      mintId,\r\n      fungible,\r\n      mintMetadataId: findMintMetadataId(mintId),\r\n      userOriginalMintTokenAccountId: getAssociatedTokenAddressSync(\r\n        mintId,\r\n        wallet.publicKey\r\n      ),\r\n      stakeEntryId:\r\n        stakeEntryId ??\r\n        findStakeEntryId(\r\n          wallet.publicKey,\r\n          params.stakePoolId,\r\n          mintId,\r\n          fungible ?? false\r\n        ),\r\n    })\r\n  );\r\n  const rewardDistributorId = findRewardDistributorId(params.stakePoolId);\r\n\r\n  /////// get accounts ///////\r\n  const accountData = await fetchAccountDataById(connection, [\r\n    rewardDistributorId,\r\n    params.stakePoolId,\r\n    ...mintInfos.map(({ mintMetadataId }) => mintMetadataId),\r\n    ...mintInfos.map(({ stakeEntryId }) => stakeEntryId),\r\n    ...mintInfos.map(({ mintId, userOriginalMintTokenAccountId }) =>\r\n      findTokenRecordId(mintId, userOriginalMintTokenAccountId)\r\n    ),\r\n  ]);\r\n\r\n  const stakePoolInfo = accountData[params.stakePoolId.toString()];\r\n  if (!stakePoolInfo?.data) throw \"Stake pool not found\";\r\n  const stakePoolData = decodeIdlAccount<\"stakePool\", CardinalStakePool>(\r\n    stakePoolInfo,\r\n    \"stakePool\",\r\n    STAKE_POOL_IDL\r\n  );\r\n  const rewardDistributorInfo = accountData[rewardDistributorId.toString()];\r\n  const rewardDistributorData = rewardDistributorInfo\r\n    ? tryDecodeIdlAccount<\"rewardDistributor\", CardinalRewardDistributor>(\r\n      rewardDistributorInfo,\r\n      \"rewardDistributor\",\r\n      REWARD_DISTRIBUTOR_IDL\r\n    )\r\n    : null;\r\n  const rewardMintId = rewardDistributorData?.parsed?.rewardMint;\r\n  const userRewardTokenAccountId = rewardMintId\r\n    ? getAssociatedTokenAddressSync(rewardMintId, wallet.publicKey, true)\r\n    : null;\r\n\r\n  const txs: { tx: Transaction }[] = [];\r\n  for (const {\r\n    mintId: originalMintId,\r\n    stakeEntryId,\r\n    mintMetadataId,\r\n    userOriginalMintTokenAccountId,\r\n  } of mintInfos) {\r\n    /////// deserialize accounts ///////\r\n    const metadataAccountInfo = accountData[mintMetadataId.toString()];\r\n    const mintMetadata = metadataAccountInfo\r\n      ? Metadata.deserialize(metadataAccountInfo.data)[0]\r\n      : null;\r\n    const tokenRecordInfo =\r\n      accountData[\r\n      findTokenRecordId(\r\n        originalMintId,\r\n        userOriginalMintTokenAccountId\r\n      ).toString()\r\n      ];\r\n    const tokenRecordData = tokenRecordInfo\r\n      ? TokenRecord.fromAccountInfo(tokenRecordInfo)[0]\r\n      : null;\r\n\r\n    /////// start transaction ///////\r\n    const tx = new Transaction();\r\n\r\n    /////// init user token account ///////\r\n\r\n    tx.add(\r\n      createAssociatedTokenAccountIdempotentInstruction(\r\n        wallet.publicKey,\r\n        userOriginalMintTokenAccountId,\r\n        wallet.publicKey,\r\n        originalMintId\r\n      )\r\n    );\r\n\r\n    if (rewardDistributorData?.parsed && userRewardTokenAccountId) {\r\n      /////// update total stake seconds ///////\r\n      const updateIx = await stakePoolProgram(connection, wallet)\r\n        .methods.updateTotalStakeSeconds()\r\n        .accounts({\r\n          stakeEntry: stakeEntryId,\r\n          lastStaker: wallet.publicKey,\r\n        })\r\n        .instruction();\r\n      tx.add(updateIx);\r\n\r\n      /////// claim rewards ///////\r\n      const rewardEntryId = findRewardEntryId(\r\n        rewardDistributorId,\r\n        stakeEntryId\r\n      );\r\n      const rewardEntry = await tryGetAccount(() =>\r\n        getRewardEntry(connection, rewardEntryId)\r\n      );\r\n\r\n      if (!rewardEntry) {\r\n        const ix = await rewardDistributorProgram(connection, wallet)\r\n          .methods.initRewardEntry()\r\n          .accounts({\r\n            rewardEntry: findRewardEntryId(rewardDistributorId, stakeEntryId),\r\n            rewardDistributor: rewardDistributorId,\r\n            stakeEntry: stakeEntryId,\r\n            payer: wallet.publicKey,\r\n            systemProgram: SystemProgram.programId,\r\n          })\r\n          .instruction();\r\n        tx.add(ix);\r\n      }\r\n      const stakeEntryInfo = accountData[stakeEntryId.toString()]!;\r\n      const stakeEntryData = decodeIdlAccount<\"stakeEntry\", CardinalStakePool>(\r\n        stakeEntryInfo,\r\n        \"stakeEntry\",\r\n        STAKE_POOL_IDL\r\n      );\r\n      const ix = await rewardDistributorProgram(connection, wallet)\r\n        .methods.claimRewards()\r\n        .accounts({\r\n          rewardEntry: rewardEntryId,\r\n          rewardDistributor: rewardDistributorId,\r\n          stakeEntry: stakeEntryId,\r\n          stakePool: params.stakePoolId,\r\n          rewardMint: rewardDistributorData.parsed.rewardMint,\r\n          userRewardMintTokenAccount: userRewardTokenAccountId,\r\n          rewardManager: REWARD_MANAGER,\r\n          user: wallet.publicKey,\r\n          tokenProgram: TOKEN_PROGRAM_ID,\r\n          systemProgram: SystemProgram.programId,\r\n        })\r\n        .remainingAccounts([\r\n          {\r\n            pubkey: getAssociatedTokenAddressSync(\r\n              rewardDistributorData.parsed.rewardMint,\r\n              rewardDistributorId,\r\n              true\r\n            ),\r\n            isSigner: false,\r\n            isWritable: true,\r\n          },\r\n        ])\r\n        .instruction();\r\n      if (\r\n        !(\r\n          rewardDistributorData.parsed.maxRewardSecondsReceived &&\r\n          stakeEntryData.parsed.totalStakeSeconds >\r\n          rewardDistributorData.parsed.maxRewardSecondsReceived\r\n        )\r\n      ) {\r\n        tx.add(ix);\r\n      }\r\n    }\r\n    if (\r\n      mintMetadata?.tokenStandard === TokenStandard.ProgrammableNonFungible &&\r\n      // mintMetadata.programmableConfig?.ruleSet &&\r\n      tokenRecordData?.delegateRole === TokenDelegateRole.Staking\r\n    ) {\r\n      /////// programmable ///////\r\n      tx.add(\r\n        ComputeBudgetProgram.setComputeUnitLimit({\r\n          units: 100000000,\r\n        })\r\n      );\r\n      const ix = await stakePoolProgram(connection, wallet)\r\n        .methods.unstakeProgrammable()\r\n        .accounts({\r\n          stakeEntry: stakeEntryId,\r\n          stakePool: params.stakePoolId,\r\n          originalMint: originalMintId,\r\n          systemProgram: SystemProgram.programId,\r\n          user: wallet.publicKey,\r\n          tokenProgram: TOKEN_PROGRAM_ID,\r\n          tokenMetadataProgram: METADATA_PROGRAM_ID,\r\n          userOriginalMintTokenAccount: userOriginalMintTokenAccountId,\r\n          userOriginalMintTokenRecord: findTokenRecordId(\r\n            originalMintId,\r\n            userOriginalMintTokenAccountId\r\n          ),\r\n          mintMetadata: mintMetadataId,\r\n          mintEdition: findMintEditionId(originalMintId),\r\n          authorizationRules:\r\n            mintMetadata.programmableConfig?.ruleSet ?? METADATA_PROGRAM_ID,\r\n          sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,\r\n          authorizationRulesProgram: TOKEN_AUTH_RULES_ID,\r\n        })\r\n        .instruction();\r\n      tx.add(ix);\r\n    } else {\r\n      /////// non-programmable ///////\r\n      const stakeEntryInfo = accountData[stakeEntryId.toString()];\r\n      if (!stakeEntryInfo) throw \"Stake entry not found\";\r\n      const stakeEntry = decodeIdlAccount<\"stakeEntry\", CardinalStakePool>(\r\n        stakeEntryInfo,\r\n        \"stakeEntry\",\r\n        STAKE_POOL_IDL\r\n      );\r\n\r\n      if (\r\n        stakeEntry.parsed.stakeMintClaimed ||\r\n        stakeEntry.parsed.originalMintClaimed\r\n      ) {\r\n        /////// receipts ///////\r\n        const receiptMint =\r\n          stakeEntry.parsed.stakeMint && stakeEntry.parsed.stakeMintClaimed\r\n            ? stakeEntry.parsed.stakeMint\r\n            : stakeEntry.parsed.originalMint;\r\n\r\n        const tokenManagerId = findTokenManagerAddress(receiptMint);\r\n\r\n        // todo network call in loop for token manager data\r\n        const tokenManagerData = await tryNull(() =>\r\n          tokenManager.accounts.getTokenManager(connection, tokenManagerId)\r\n        );\r\n        if (\r\n          tokenManagerData &&\r\n          shouldReturnReceipt(stakePoolData.parsed, stakeEntry.parsed)\r\n        ) {\r\n          const remainingAccounts = await withRemainingAccountsForInvalidate(\r\n            tx,\r\n            connection,\r\n            wallet,\r\n            receiptMint,\r\n            tokenManagerData,\r\n            stakeEntryId,\r\n            mintMetadata\r\n          );\r\n          const ix = await stakePoolProgram(connection, wallet)\r\n            .methods.returnReceiptMint()\r\n            .accounts({\r\n              stakeEntry: stakeEntryId,\r\n              receiptMint: receiptMint,\r\n              tokenManager: tokenManagerId,\r\n              tokenManagerTokenAccount: getAssociatedTokenAddressSync(\r\n                receiptMint,\r\n                tokenManagerId,\r\n                true\r\n              ),\r\n              userReceiptMintTokenAccount: getAssociatedTokenAddressSync(\r\n                receiptMint,\r\n                wallet.publicKey,\r\n                true\r\n              ),\r\n              user: wallet.publicKey,\r\n              collector: CRANK_KEY,\r\n              tokenProgram: TOKEN_PROGRAM_ID,\r\n              tokenManagerProgram: TOKEN_MANAGER_ADDRESS,\r\n              rent: SYSVAR_RENT_PUBKEY,\r\n            })\r\n            .remainingAccounts(remainingAccounts)\r\n            .instruction();\r\n          tx.add(ix);\r\n        }\r\n      }\r\n      const stakeEntryOriginalMintTokenAccountId =\r\n        getAssociatedTokenAddressSync(originalMintId, stakeEntryId, true);\r\n      const program = stakePoolProgram(connection, wallet);\r\n\r\n      if (tokenRecordData?.delegateRole === TokenDelegateRole.Migration) {\r\n        const ix = await program.methods\r\n          .unstakeCustodialProgrammable()\r\n          .accounts({\r\n            stakePool: params.stakePoolId,\r\n            stakeEntry: stakeEntryId,\r\n            originalMint: originalMintId,\r\n            stakeEntryOriginalMintTokenAccount:\r\n              stakeEntryOriginalMintTokenAccountId,\r\n            user: wallet.publicKey,\r\n            userOriginalMintTokenAccount: userOriginalMintTokenAccountId,\r\n            stakeEntryOriginalMintTokenRecord: findTokenRecordId(\r\n              originalMintId,\r\n              stakeEntryOriginalMintTokenAccountId\r\n            ),\r\n            userOriginalMintTokenRecord: findTokenRecordId(\r\n              originalMintId,\r\n              userOriginalMintTokenAccountId\r\n            ),\r\n            mintMetadata: mintMetadataId,\r\n            mintEdition: findMintEditionId(originalMintId),\r\n            authorizationRules:\r\n              mintMetadata?.programmableConfig?.ruleSet ?? METADATA_PROGRAM_ID,\r\n            sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,\r\n            tokenProgram: TOKEN_PROGRAM_ID,\r\n            associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\r\n            tokenMetadataProgram: METADATA_PROGRAM_ID,\r\n            authorizationRulesProgram: TOKEN_AUTH_RULES_ID,\r\n            systemProgram: SystemProgram.programId,\r\n          })\r\n          .instruction();\r\n        tx.add(ix);\r\n      } else {\r\n        const ix = await program.methods\r\n          .unstake()\r\n          .accounts({\r\n            stakePool: params.stakePoolId,\r\n            stakeEntry: stakeEntryId,\r\n            originalMint: originalMintId,\r\n            stakeEntryOriginalMintTokenAccount:\r\n              stakeEntryOriginalMintTokenAccountId,\r\n            user: wallet.publicKey,\r\n            userOriginalMintTokenAccount: userOriginalMintTokenAccountId,\r\n            tokenProgram: TOKEN_PROGRAM_ID,\r\n          })\r\n          .remainingAccounts(\r\n            stakeEntry.parsed.stakeMint\r\n              ? [\r\n                {\r\n                  pubkey: getAssociatedTokenAddressSync(\r\n                    stakeEntry.parsed.stakeMint,\r\n                    stakeEntryId,\r\n                    true\r\n                  ),\r\n                  isSigner: false,\r\n                  isWritable: false,\r\n                },\r\n              ]\r\n              : []\r\n          )\r\n          .instruction();\r\n        tx.add(ix);\r\n      }\r\n    }\r\n    txs.push({ tx });\r\n  }\r\n\r\n  /////// preTxs ///////\r\n  let rewardTokenAccount: Account | null = null;\r\n  if (userRewardTokenAccountId && rewardMintId) {\r\n    rewardTokenAccount = await tryNull(\r\n      getAccount(connection, userRewardTokenAccountId)\r\n    );\r\n  }\r\n  return !rewardTokenAccount && userRewardTokenAccountId && rewardMintId\r\n    ? [\r\n      txs.slice(0, 1).map(({ tx }) => {\r\n        tx.instructions = [\r\n          createAssociatedTokenAccountIdempotentInstruction(\r\n            wallet.publicKey,\r\n            userRewardTokenAccountId,\r\n            wallet.publicKey,\r\n            rewardMintId\r\n          ),\r\n          ...tx.instructions,\r\n        ];\r\n        return { tx };\r\n      }),\r\n      txs.slice(1),\r\n    ]\r\n    : [txs];\r\n};\r\n"]}