{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/programs/stakePool/utils.ts"],"names":[],"mappings":";;;AACA,6CAAwE;AACxE,8CAAgE;AAUhE,uCAA4C;AAE5C,4DAG8B;AAC9B,kDAAmE;AAEnE,wBAAuD;AACvD,+BAAmE;AAE5D,MAAM,kCAAkC,GAAG,CAChD,WAAsB,EACtB,cAAyB,EACV,EAAE;IACjB,MAAM,0BAA0B,GAAG,IAAA,8BAAwB,EACzD,WAAW,EACX,cAAc,CACf,CAAC;IACF,OAAO;QACL;YACE,MAAM,EAAE,0BAA0B;YAClC,QAAQ,EAAE,KAAK;YACf,UAAU,EAAE,KAAK;SAClB;KACF,CAAC;AACJ,CAAC,CAAC;AAfW,QAAA,kCAAkC,sCAe7C;AAEK,MAAM,+BAA+B,GAAG,KAAK,EAClD,WAAwB,EACxB,UAAsB,EACtB,MAAc,EACd,YAAuB,EACvB,WAAyC,EACjB,EAAE;IAC1B,IAAI,WAAW,EAAE;QACf,MAAM,iCAAiC,GACrC,MAAM,IAAA,6CAAoC,EACxC,WAAW,EACX,UAAU,EACV,WAAW,EACX,YAAY,EACZ,MAAM,CAAC,SAAS,EAChB,IAAI,CACL,CAAC;QACJ,OAAO;YACL;gBACE,MAAM,EAAE,iCAAiC;gBACzC,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,KAAK;aAClB;SACF,CAAC;KACH;SAAM;QACL,OAAO,EAAE,CAAC;KACX;AACH,CAAC,CAAC;AA3BW,QAAA,+BAA+B,mCA2B1C;AAEF;;;;GAIG;AACI,MAAM,wBAAwB,GAAG,KAAK,EAC3C,UAAsB,EACtB,MAAiB,EACjB,WAAsB,EACtB,cAAyB,EACzB,UAAoB,EACA,EAAE;IACtB,IAAI,UAAU,KAAK,SAAS,EAAE;QAC5B,MAAM,MAAM,GAAG,MAAM,IAAA,qBAAa,EAAC,UAAU,EAAE,cAAc,CAAC,CAAC;QAC/D,UAAU,GAAG,MAAM,CAAC,EAAE,CAAC,IAAI,WAAE,CAAC,CAAC,CAAC,CAAC,CAAC;KACnC;IACD,OAAO,IAAA,sBAAgB,EAAC,MAAM,EAAE,WAAW,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC;AAC3E,CAAC,CAAC;AAZW,QAAA,wBAAwB,4BAYnC;AAEK,MAAM,oBAAoB,GAAG,KAAK,EACvC,UAAsB,EACtB,YAAuB,EACV,EAAE;IACf,6DAA6D;IAC7D,aAAa;IACb,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IAC1D,MAAM,gBAAgB,GAAG,IAAI,gBAAO,CAClC,iBAAc,EACd,qBAAkB,EAClB,QAAQ,CACT,CAAC;IACF,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IAC7E,OAAO,MAAM,CAAC,iBAAiB,CAAC;AAClC,CAAC,CAAC;AAdW,QAAA,oBAAoB,wBAc/B;AAEK,MAAM,qBAAqB,GAAG,KAAK,EACxC,UAAsB,EACtB,YAAuB,EACV,EAAE;IACf,6DAA6D;IAC7D,aAAa;IACb,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IAC1D,MAAM,gBAAgB,GAAG,IAAI,gBAAO,CAClC,iBAAc,EACd,qBAAkB,EAClB,QAAQ,CACT,CAAC;IACF,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IAE7E,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;IAC7C,MAAM,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,IAAI,MAAM,CAAC;IAC9D,OAAO,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,WAAE,CAAC,MAAM,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,WAAE,CAAC,CAAC,CAAC,CAAC;AACvE,CAAC,CAAC;AAjBW,QAAA,qBAAqB,yBAiBhC;AAEK,MAAM,mBAAmB,GAAG,KAAK,EACtC,UAAsB,EACtB,WAAsB,EACT,EAAE;;IACf,6DAA6D;IAC7D,aAAa;IACb,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IAC1D,MAAM,iBAAiB,GAAG,IAAI,gBAAO,CACnC,0CAAsB,EACtB,8CAA0B,EAC1B,QAAQ,CACT,CAAC;IAEF,MAAM,mBAAmB,GAAG,IAAA,6BAAuB,EAAC,WAAW,CAAC,CAAC;IACjE,MAAM,MAAM,GAAG,MAAM,iBAAiB,CAAC,OAAO,CAAC,iBAAiB,CAAC,KAAK,CACpE,mBAAmB,CACpB,CAAC;IACF,OAAO,MAAM,CAAC,SAAS;QACrB,CAAC,CAAC,IAAI,WAAE,CAAC,CAAA,MAAA,MAAM,CAAC,SAAS,0CAAE,QAAQ,EAAE,IAAG,MAAM,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;QACxE,CAAC,CAAC,IAAI,WAAE,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC;AApBW,QAAA,mBAAmB,uBAoB9B;AAEK,MAAM,iBAAiB,GAAG,KAAK,EACpC,UAAsB,EACtB,WAAsB,EACT,EAAE;IACf,6DAA6D;IAC7D,aAAa;IACb,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IAC1D,MAAM,iBAAiB,GAAG,IAAI,gBAAO,CACnC,0CAAsB,EACtB,8CAA0B,EAC1B,QAAQ,CACT,CAAC;IAEF,MAAM,mBAAmB,GAAG,IAAA,6BAAuB,EAAC,WAAW,CAAC,CAAC;IACjE,MAAM,MAAM,GAAG,MAAM,iBAAiB,CAAC,OAAO,CAAC,iBAAiB,CAAC,KAAK,CACpE,mBAAmB,CACpB,CAAC;IACF,OAAO,MAAM,CAAC,aAAa,CAAC;AAC9B,CAAC,CAAC;AAlBW,QAAA,iBAAiB,qBAkB5B;AAEK,MAAM,mBAAmB,GAAG,CACjC,aAAmE,EACnE,cAAqE,EAC5D,EAAE;AACX,cAAc;AACd,CAAC,aAAa,CAAC,eAAe;IAC9B,aAAa,CAAC,eAAe,KAAK,CAAC;IACnC,CAAC,CAAC,CAAC,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,oBAAoB,CAAA;QACrC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,cAAc,CAAC,oBAAoB,CAAC,QAAQ,EAAE;YAChE,aAAa,CAAC,eAAe,CAAC,CAAC;AATxB,QAAA,mBAAmB,uBASK","sourcesContent":["import type { ParsedIdlAccountData } from \"@cardinal/common\";\r\nimport { withFindOrInitAssociatedTokenAccount } from \"@cardinal/common\";\r\nimport { AnchorProvider, BN, Program } from \"@coral-xyz/anchor\";\r\nimport type { Wallet } from \"@coral-xyz/anchor/dist/cjs/provider\";\r\nimport type {\r\n  AccountMeta,\r\n  Connection,\r\n  PublicKey,\r\n  Transaction,\r\n} from \"@solana/web3.js\";\r\n\r\nimport type { CardinalStakePool } from \"../../idl/cardinal_stake_pool\";\r\nimport { getMintSupply } from \"../../utils\";\r\nimport type { REWARD_DISTRIBUTOR_PROGRAM } from \"../rewardDistributor\";\r\nimport {\r\n  REWARD_DISTRIBUTOR_ADDRESS,\r\n  REWARD_DISTRIBUTOR_IDL,\r\n} from \"../rewardDistributor\";\r\nimport { findRewardDistributorId } from \"../rewardDistributor/pda\";\r\nimport type { STAKE_POOL_PROGRAM } from \".\";\r\nimport { STAKE_POOL_ADDRESS, STAKE_POOL_IDL } from \".\";\r\nimport { findStakeAuthorizationId, findStakeEntryId } from \"./pda\";\r\n\r\nexport const remainingAccountsForInitStakeEntry = (\r\n  stakePoolId: PublicKey,\r\n  originalMintId: PublicKey\r\n): AccountMeta[] => {\r\n  const stakeAuthorizationRecordId = findStakeAuthorizationId(\r\n    stakePoolId,\r\n    originalMintId\r\n  );\r\n  return [\r\n    {\r\n      pubkey: stakeAuthorizationRecordId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n};\r\n\r\nexport const withRemainingAccountsForUnstake = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  stakeEntryId: PublicKey,\r\n  receiptMint: PublicKey | null | undefined\r\n): Promise<AccountMeta[]> => {\r\n  if (receiptMint) {\r\n    const stakeEntryReceiptMintTokenAccount =\r\n      await withFindOrInitAssociatedTokenAccount(\r\n        transaction,\r\n        connection,\r\n        receiptMint,\r\n        stakeEntryId,\r\n        wallet.publicKey,\r\n        true\r\n      );\r\n    return [\r\n      {\r\n        pubkey: stakeEntryReceiptMintTokenAccount,\r\n        isSigner: false,\r\n        isWritable: false,\r\n      },\r\n    ];\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * Convenience method to find the stake entry id from a mint\r\n * NOTE: This will lookup the mint on-chain to get the supply\r\n * @returns\r\n */\r\nexport const findStakeEntryIdFromMint = async (\r\n  connection: Connection,\r\n  wallet: PublicKey,\r\n  stakePoolId: PublicKey,\r\n  originalMintId: PublicKey,\r\n  isFungible?: boolean\r\n): Promise<PublicKey> => {\r\n  if (isFungible === undefined) {\r\n    const supply = await getMintSupply(connection, originalMintId);\r\n    isFungible = supply.gt(new BN(1));\r\n  }\r\n  return findStakeEntryId(wallet, stakePoolId, originalMintId, isFungible);\r\n};\r\n\r\nexport const getTotalStakeSeconds = async (\r\n  connection: Connection,\r\n  stakeEntryId: PublicKey\r\n): Promise<BN> => {\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  const provider = new AnchorProvider(connection, null, {});\r\n  const stakePoolProgram = new Program<STAKE_POOL_PROGRAM>(\r\n    STAKE_POOL_IDL,\r\n    STAKE_POOL_ADDRESS,\r\n    provider\r\n  );\r\n  const parsed = await stakePoolProgram.account.stakeEntry.fetch(stakeEntryId);\r\n  return parsed.totalStakeSeconds;\r\n};\r\n\r\nexport const getActiveStakeSeconds = async (\r\n  connection: Connection,\r\n  stakeEntryId: PublicKey\r\n): Promise<BN> => {\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  const provider = new AnchorProvider(connection, null, {});\r\n  const stakePoolProgram = new Program<STAKE_POOL_PROGRAM>(\r\n    STAKE_POOL_IDL,\r\n    STAKE_POOL_ADDRESS,\r\n    provider\r\n  );\r\n  const parsed = await stakePoolProgram.account.stakeEntry.fetch(stakeEntryId);\r\n\r\n  const UTCNow = Math.floor(Date.now() / 1000);\r\n  const lastStakedAt = parsed.lastStakedAt.toNumber() || UTCNow;\r\n  return parsed.lastStaker ? new BN(UTCNow - lastStakedAt) : new BN(0);\r\n};\r\n\r\nexport const getUnclaimedRewards = async (\r\n  connection: Connection,\r\n  stakePoolId: PublicKey\r\n): Promise<BN> => {\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  const provider = new AnchorProvider(connection, null, {});\r\n  const rewardDistributor = new Program<REWARD_DISTRIBUTOR_PROGRAM>(\r\n    REWARD_DISTRIBUTOR_IDL,\r\n    REWARD_DISTRIBUTOR_ADDRESS,\r\n    provider\r\n  );\r\n\r\n  const rewardDistributorId = findRewardDistributorId(stakePoolId);\r\n  const parsed = await rewardDistributor.account.rewardDistributor.fetch(\r\n    rewardDistributorId\r\n  );\r\n  return parsed.maxSupply\r\n    ? new BN(parsed.maxSupply?.toNumber() - parsed.rewardsIssued.toNumber())\r\n    : new BN(0);\r\n};\r\n\r\nexport const getClaimedRewards = async (\r\n  connection: Connection,\r\n  stakePoolId: PublicKey\r\n): Promise<BN> => {\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  const provider = new AnchorProvider(connection, null, {});\r\n  const rewardDistributor = new Program<REWARD_DISTRIBUTOR_PROGRAM>(\r\n    REWARD_DISTRIBUTOR_IDL,\r\n    REWARD_DISTRIBUTOR_ADDRESS,\r\n    provider\r\n  );\r\n\r\n  const rewardDistributorId = findRewardDistributorId(stakePoolId);\r\n  const parsed = await rewardDistributor.account.rewardDistributor.fetch(\r\n    rewardDistributorId\r\n  );\r\n  return parsed.rewardsIssued;\r\n};\r\n\r\nexport const shouldReturnReceipt = (\r\n  stakePoolData: ParsedIdlAccountData<\"stakePool\", CardinalStakePool>,\r\n  stakeEntryData: ParsedIdlAccountData<\"stakeEntry\", CardinalStakePool>\r\n): boolean =>\r\n  // no cooldown\r\n  !stakePoolData.cooldownSeconds ||\r\n  stakePoolData.cooldownSeconds === 0 ||\r\n  (!!stakeEntryData?.cooldownStartSeconds &&\r\n    Date.now() / 1000 - stakeEntryData.cooldownStartSeconds.toNumber() >=\r\n      stakePoolData.cooldownSeconds);\r\n"]}