{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../../../../src/programs/stakePool/accounts.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccountData } from \"@cardinal/common\";\r\nimport { BorshAccountsCoder, utils } from \"@coral-xyz/anchor\";\r\nimport type { Commitment, Connection } from \"@solana/web3.js\";\r\nimport { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport type { StakePoolData } from \".\";\r\nimport { STAKE_POOL_ADDRESS, STAKE_POOL_IDL } from \".\";\r\nimport type {\r\n  GroupStakeEntryData,\r\n  IdentifierData,\r\n  StakeAuthorizationData,\r\n  StakeBoosterData,\r\n  StakeEntryData,\r\n} from \"./constants\";\r\nimport {\r\n  AUTHORITY_OFFSET,\r\n  GROUP_STAKER_OFFSET,\r\n  POOL_OFFSET,\r\n  stakePoolProgram,\r\n  STAKER_OFFSET,\r\n} from \"./constants\";\r\nimport { findIdentifierId } from \"./pda\";\r\n\r\nexport const getStakePool = async (\r\n  connection: Connection,\r\n  stakePoolId: PublicKey,\r\n  commitment?: Commitment\r\n): Promise<AccountData<StakePoolData>> => {\r\n  const program = stakePoolProgram(connection, undefined, { commitment });\r\n  const parsed = await program.account.stakePool.fetch(stakePoolId);\r\n  return {\r\n    parsed,\r\n    pubkey: stakePoolId,\r\n  };\r\n};\r\n\r\nexport const getStakePools = async (\r\n  connection: Connection,\r\n  stakePoolIds: PublicKey[],\r\n  commitment?: Commitment\r\n): Promise<AccountData<StakePoolData>[]> => {\r\n  const program = stakePoolProgram(connection, undefined, { commitment });\r\n  const stakePools = (await program.account.stakePool.fetchMultiple(\r\n    stakePoolIds\r\n  )) as StakePoolData[];\r\n  return stakePools.map((tm, i) => ({\r\n    parsed: tm,\r\n    pubkey: stakePoolIds[i]!,\r\n  }));\r\n};\r\n\r\nexport const getAllStakePools = async (\r\n  connection: Connection,\r\n  commitment?: Commitment\r\n): Promise<AccountData<StakePoolData>[]> => {\r\n  const programAccounts = await connection.getProgramAccounts(\r\n    STAKE_POOL_ADDRESS,\r\n    {\r\n      filters: [\r\n        {\r\n          memcmp: {\r\n            offset: 0,\r\n            bytes: utils.bytes.bs58.encode(\r\n              BorshAccountsCoder.accountDiscriminator(\"stakePool\")\r\n            ),\r\n          },\r\n        },\r\n      ],\r\n      commitment,\r\n    }\r\n  );\r\n  const stakePoolDatas: AccountData<StakePoolData>[] = [];\r\n  const coder = new BorshAccountsCoder(STAKE_POOL_IDL);\r\n  programAccounts.forEach((account) => {\r\n    try {\r\n      const stakePoolData: StakePoolData = coder.decode(\r\n        \"stakePool\",\r\n        account.account.data\r\n      );\r\n      if (stakePoolData) {\r\n        stakePoolDatas.push({\r\n          ...account,\r\n          parsed: stakePoolData,\r\n        });\r\n      }\r\n      // eslint-disable-next-line no-empty\r\n    } catch (e) {}\r\n  });\r\n  return stakePoolDatas.sort((a, b) =>\r\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\r\n  );\r\n};\r\n\r\nexport const getStakeEntriesForUser = async (\r\n  connection: Connection,\r\n  user: PublicKey,\r\n  commitment?: Commitment\r\n): Promise<AccountData<StakeEntryData>[]> => {\r\n  const programAccounts = await connection.getProgramAccounts(\r\n    STAKE_POOL_ADDRESS,\r\n    {\r\n      filters: [{ memcmp: { offset: STAKER_OFFSET, bytes: user.toBase58() } }],\r\n      commitment,\r\n    }\r\n  );\r\n\r\n  const stakeEntryDatas: AccountData<StakeEntryData>[] = [];\r\n  const coder = new BorshAccountsCoder(STAKE_POOL_IDL);\r\n  programAccounts.forEach((account) => {\r\n    try {\r\n      const stakeEntryData: StakeEntryData = coder.decode(\r\n        \"stakeEntry\",\r\n        account.account.data\r\n      );\r\n      if (stakeEntryData) {\r\n        stakeEntryDatas.push({\r\n          ...account,\r\n          parsed: stakeEntryData,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(`Failed to decode token manager data`);\r\n    }\r\n  });\r\n\r\n  return stakeEntryDatas.sort((a, b) =>\r\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\r\n  );\r\n};\r\n\r\nexport const getAllActiveStakeEntries = async (\r\n  connection: Connection,\r\n  commitment?: Commitment\r\n): Promise<AccountData<StakeEntryData>[]> => {\r\n  const programAccounts = await connection.getProgramAccounts(\r\n    STAKE_POOL_ADDRESS,\r\n    {\r\n      filters: [\r\n        {\r\n          memcmp: {\r\n            offset: 0,\r\n            bytes: utils.bytes.bs58.encode(\r\n              BorshAccountsCoder.accountDiscriminator(\"stakeEntry\")\r\n            ),\r\n          },\r\n        },\r\n      ],\r\n      commitment,\r\n    }\r\n  );\r\n  const stakeEntryDatas: AccountData<StakeEntryData>[] = [];\r\n  const coder = new BorshAccountsCoder(STAKE_POOL_IDL);\r\n  programAccounts.forEach((account) => {\r\n    try {\r\n      const stakeEntryData: StakeEntryData = coder.decode(\r\n        \"stakeEntry\",\r\n        account.account.data\r\n      );\r\n      if (\r\n        stakeEntryData &&\r\n        stakeEntryData.lastStaker.toString() !== PublicKey.default.toString()\r\n      ) {\r\n        stakeEntryDatas.push({\r\n          ...account,\r\n          parsed: stakeEntryData,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      // console.log(`Failed to decode stake entry data`);\r\n    }\r\n  });\r\n\r\n  return stakeEntryDatas.sort((a, b) =>\r\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\r\n  );\r\n};\r\n\r\nexport const getAllStakeEntriesForPool = async (\r\n  connection: Connection,\r\n  stakePoolId: PublicKey,\r\n  commitment?: Commitment\r\n): Promise<AccountData<StakeEntryData>[]> => {\r\n  const programAccounts = await connection.getProgramAccounts(\r\n    STAKE_POOL_ADDRESS,\r\n    {\r\n      filters: [\r\n        {\r\n          memcmp: {\r\n            offset: 0,\r\n            bytes: utils.bytes.bs58.encode(\r\n              BorshAccountsCoder.accountDiscriminator(\"stakeEntry\")\r\n            ),\r\n          },\r\n        },\r\n        {\r\n          memcmp: { offset: POOL_OFFSET, bytes: stakePoolId.toBase58() },\r\n        },\r\n      ],\r\n      commitment,\r\n    }\r\n  );\r\n  const stakeEntryDatas: AccountData<StakeEntryData>[] = [];\r\n  const coder = new BorshAccountsCoder(STAKE_POOL_IDL);\r\n  programAccounts.forEach((account) => {\r\n    try {\r\n      const stakeEntryData: StakeEntryData = coder.decode(\r\n        \"stakeEntry\",\r\n        account.account.data\r\n      );\r\n      stakeEntryDatas.push({\r\n        ...account,\r\n        parsed: stakeEntryData,\r\n      });\r\n    } catch (e) {\r\n      // console.log(`Failed to decode stake entry data`);\r\n    }\r\n  });\r\n\r\n  return stakeEntryDatas.sort((a, b) =>\r\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\r\n  );\r\n};\r\n\r\nexport const getActiveStakeEntriesForPool = async (\r\n  connection: Connection,\r\n  stakePoolId: PublicKey,\r\n  commitment?: Commitment\r\n): Promise<AccountData<StakeEntryData>[]> => {\r\n  const programAccounts = await connection.getProgramAccounts(\r\n    STAKE_POOL_ADDRESS,\r\n    {\r\n      filters: [\r\n        {\r\n          memcmp: { offset: POOL_OFFSET, bytes: stakePoolId.toBase58() },\r\n        },\r\n      ],\r\n      commitment,\r\n    }\r\n  );\r\n  const stakeEntryDatas: AccountData<StakeEntryData>[] = [];\r\n  const coder = new BorshAccountsCoder(STAKE_POOL_IDL);\r\n  programAccounts.forEach((account) => {\r\n    try {\r\n      const stakeEntryData: StakeEntryData = coder.decode(\r\n        \"stakeEntry\",\r\n        account.account.data\r\n      );\r\n      if (\r\n        stakeEntryData &&\r\n        stakeEntryData.lastStaker.toString() !== PublicKey.default.toString()\r\n      ) {\r\n        stakeEntryDatas.push({\r\n          ...account,\r\n          parsed: stakeEntryData,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      // console.log(`Failed to decode token manager data`);\r\n    }\r\n  });\r\n\r\n  return stakeEntryDatas.sort((a, b) =>\r\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\r\n  );\r\n};\r\n\r\nexport const getActiveStakeEntryIdsForPool = async (\r\n  connection: Connection,\r\n  stakePoolId: PublicKey,\r\n  commitment?: Commitment\r\n): Promise<PublicKey[]> => {\r\n  const programAccounts = await connection.getProgramAccounts(\r\n    STAKE_POOL_ADDRESS,\r\n    {\r\n      filters: [\r\n        {\r\n          memcmp: { offset: POOL_OFFSET, bytes: stakePoolId.toBase58() },\r\n        },\r\n      ],\r\n      commitment,\r\n      dataSlice: {\r\n        length: 32,\r\n        offset: STAKER_OFFSET,\r\n      },\r\n    }\r\n  );\r\n  return programAccounts\r\n    .filter((x) => {\r\n      try {\r\n        const lastStaker = new PublicKey(x.account.data);\r\n        return !lastStaker.equals(PublicKey.default);\r\n      } catch (error) {\r\n        console.error(error);\r\n        return false;\r\n      }\r\n    })\r\n    .map((x) => x.pubkey);\r\n};\r\n\r\nexport const getStakeEntry = async (\r\n  connection: Connection,\r\n  stakeEntryId: PublicKey,\r\n  commitment?: Commitment\r\n): Promise<AccountData<StakeEntryData>> => {\r\n  const program = stakePoolProgram(connection, undefined, { commitment });\r\n  const parsed = await program.account.stakeEntry.fetch(stakeEntryId);\r\n  return {\r\n    parsed,\r\n    pubkey: stakeEntryId,\r\n  };\r\n};\r\n\r\nexport const getStakeEntries = async (\r\n  connection: Connection,\r\n  stakeEntryIds: PublicKey[],\r\n  commitment?: Commitment\r\n): Promise<AccountData<StakeEntryData>[]> => {\r\n  const program = stakePoolProgram(connection, undefined, { commitment });\r\n  const stakeEntries = (await program.account.stakeEntry.fetchMultiple(\r\n    stakeEntryIds\r\n  )) as StakeEntryData[];\r\n  return stakeEntries.map((tm, i) => ({\r\n    parsed: tm,\r\n    pubkey: stakeEntryIds[i]!,\r\n  }));\r\n};\r\n\r\nexport const getPoolIdentifier = async (\r\n  connection: Connection,\r\n  commitment?: Commitment\r\n): Promise<AccountData<IdentifierData>> => {\r\n  const program = stakePoolProgram(connection, undefined, { commitment });\r\n  const identifierId = findIdentifierId();\r\n  const parsed = await program.account.identifier.fetch(identifierId);\r\n  return {\r\n    parsed,\r\n    pubkey: identifierId,\r\n  };\r\n};\r\n\r\nexport const getStakeAuthorization = async (\r\n  connection: Connection,\r\n  stakeAuthorizationId: PublicKey,\r\n  commitment?: Commitment\r\n): Promise<AccountData<StakeAuthorizationData>> => {\r\n  const program = stakePoolProgram(connection, undefined, { commitment });\r\n  const parsed = await program.account.stakeAuthorizationRecord.fetch(\r\n    stakeAuthorizationId\r\n  );\r\n  return {\r\n    parsed,\r\n    pubkey: stakeAuthorizationId,\r\n  };\r\n};\r\n\r\nexport const getStakeAuthorizations = async (\r\n  connection: Connection,\r\n  stakeAuthorizationIds: PublicKey[],\r\n  commitment?: Commitment\r\n): Promise<AccountData<StakeAuthorizationData>[]> => {\r\n  const program = stakePoolProgram(connection, undefined, { commitment });\r\n  const stakeAuthorizations =\r\n    (await program.account.stakeAuthorizationRecord.fetchMultiple(\r\n      stakeAuthorizationIds\r\n    )) as StakeAuthorizationData[];\r\n\r\n  return stakeAuthorizations.map((data, i) => ({\r\n    parsed: data,\r\n    pubkey: stakeAuthorizationIds[i]!,\r\n  }));\r\n};\r\n\r\nexport const getStakeAuthorizationsForPool = async (\r\n  connection: Connection,\r\n  poolId: PublicKey,\r\n  commitment?: Commitment\r\n): Promise<AccountData<StakeAuthorizationData>[]> => {\r\n  const programAccounts = await connection.getProgramAccounts(\r\n    STAKE_POOL_ADDRESS,\r\n    {\r\n      filters: [\r\n        {\r\n          memcmp: {\r\n            offset: 0,\r\n            bytes: utils.bytes.bs58.encode(\r\n              BorshAccountsCoder.accountDiscriminator(\r\n                \"stakeAuthorizationRecord\"\r\n              )\r\n            ),\r\n          },\r\n        },\r\n        {\r\n          memcmp: { offset: POOL_OFFSET, bytes: poolId.toBase58() },\r\n        },\r\n      ],\r\n      commitment,\r\n    }\r\n  );\r\n\r\n  const stakeAuthorizationDatas: AccountData<StakeAuthorizationData>[] = [];\r\n  const coder = new BorshAccountsCoder(STAKE_POOL_IDL);\r\n  programAccounts.forEach((account) => {\r\n    try {\r\n      const data: StakeAuthorizationData = coder.decode(\r\n        \"stakeAuthorizationRecord\",\r\n        account.account.data\r\n      );\r\n      stakeAuthorizationDatas.push({\r\n        ...account,\r\n        parsed: data,\r\n      });\r\n      // eslint-disable-next-line no-empty\r\n    } catch (e) {}\r\n  });\r\n\r\n  return stakeAuthorizationDatas.sort((a, b) =>\r\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\r\n  );\r\n};\r\n\r\nexport const getStakePoolsByAuthority = async (\r\n  connection: Connection,\r\n  user: PublicKey,\r\n  commitment?: Commitment\r\n): Promise<AccountData<StakePoolData>[]> => {\r\n  const programAccounts = await connection.getProgramAccounts(\r\n    STAKE_POOL_ADDRESS,\r\n    {\r\n      filters: [\r\n        {\r\n          memcmp: {\r\n            offset: 0,\r\n            bytes: utils.bytes.bs58.encode(\r\n              BorshAccountsCoder.accountDiscriminator(\"stakePool\")\r\n            ),\r\n          },\r\n        },\r\n        {\r\n          memcmp: {\r\n            offset: AUTHORITY_OFFSET,\r\n            bytes: user.toBase58(),\r\n          },\r\n        },\r\n      ],\r\n      commitment,\r\n    }\r\n  );\r\n  const stakePoolDatas: AccountData<StakePoolData>[] = [];\r\n  const coder = new BorshAccountsCoder(STAKE_POOL_IDL);\r\n  programAccounts.forEach((account) => {\r\n    try {\r\n      const stakePoolData: StakePoolData = coder.decode(\r\n        \"stakePool\",\r\n        account.account.data\r\n      );\r\n      if (stakePoolData) {\r\n        stakePoolDatas.push({\r\n          ...account,\r\n          parsed: stakePoolData,\r\n        });\r\n      }\r\n      // eslint-disable-next-line no-empty\r\n    } catch (e) {}\r\n  });\r\n  return stakePoolDatas.sort((a, b) =>\r\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\r\n  );\r\n};\r\n\r\nexport const getAllStakeEntries = async (\r\n  connection: Connection,\r\n  commitment?: Commitment\r\n): Promise<AccountData<StakeEntryData>[]> => {\r\n  const programAccounts = await connection.getProgramAccounts(\r\n    STAKE_POOL_ADDRESS,\r\n    {\r\n      filters: [\r\n        {\r\n          memcmp: {\r\n            offset: 0,\r\n            bytes: utils.bytes.bs58.encode(\r\n              BorshAccountsCoder.accountDiscriminator(\"stakeEntry\")\r\n            ),\r\n          },\r\n        },\r\n      ],\r\n      commitment,\r\n    }\r\n  );\r\n  const stakeEntryDatas: AccountData<StakeEntryData>[] = [];\r\n  const coder = new BorshAccountsCoder(STAKE_POOL_IDL);\r\n  programAccounts.forEach((account) => {\r\n    try {\r\n      const stakeEntryData: StakeEntryData = coder.decode(\r\n        \"stakeEntry\",\r\n        account.account.data\r\n      );\r\n      if (stakeEntryData) {\r\n        stakeEntryDatas.push({\r\n          ...account,\r\n          parsed: stakeEntryData,\r\n        });\r\n      }\r\n      // eslint-disable-next-line no-empty\r\n    } catch (e) {}\r\n  });\r\n  return stakeEntryDatas.sort((a, b) =>\r\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\r\n  );\r\n};\r\n\r\nexport const getStakeBooster = async (\r\n  connection: Connection,\r\n  stakeBoosterId: PublicKey,\r\n  commitment?: Commitment\r\n): Promise<AccountData<StakeBoosterData>> => {\r\n  const program = stakePoolProgram(connection, undefined, { commitment });\r\n  const parsed = await program.account.stakeBooster.fetch(stakeBoosterId);\r\n  return {\r\n    parsed,\r\n    pubkey: stakeBoosterId,\r\n  };\r\n};\r\n\r\nexport const getGroupStakeEntriesForUser = async (\r\n  connection: Connection,\r\n  user: PublicKey,\r\n  commitment?: Commitment\r\n): Promise<AccountData<GroupStakeEntryData>[]> => {\r\n  const programAccounts = await connection.getProgramAccounts(\r\n    STAKE_POOL_ADDRESS,\r\n    {\r\n      filters: [\r\n        {\r\n          memcmp: {\r\n            offset: 0,\r\n            bytes: utils.bytes.bs58.encode(\r\n              BorshAccountsCoder.accountDiscriminator(\"groupStakeEntry\")\r\n            ),\r\n          },\r\n        },\r\n        { memcmp: { offset: GROUP_STAKER_OFFSET, bytes: user.toBase58() } },\r\n      ],\r\n      commitment,\r\n    }\r\n  );\r\n\r\n  const groupStakeEntryDatas: AccountData<GroupStakeEntryData>[] = [];\r\n  const coder = new BorshAccountsCoder(STAKE_POOL_IDL);\r\n  programAccounts.forEach((account) => {\r\n    try {\r\n      const groupStakeEntryData: GroupStakeEntryData = coder.decode(\r\n        \"groupStakeEntry\",\r\n        account.account.data\r\n      );\r\n      if (groupStakeEntryData) {\r\n        groupStakeEntryDatas.push({\r\n          ...account,\r\n          parsed: groupStakeEntryData,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(`Failed to decode token manager data`);\r\n    }\r\n  });\r\n\r\n  return groupStakeEntryDatas.sort((a, b) =>\r\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\r\n  );\r\n};\r\n\r\nexport const getAllGroupStakeEntries = async (\r\n  connection: Connection,\r\n  commitment?: Commitment\r\n): Promise<AccountData<GroupStakeEntryData>[]> => {\r\n  const programAccounts = await connection.getProgramAccounts(\r\n    STAKE_POOL_ADDRESS,\r\n    {\r\n      filters: [\r\n        {\r\n          memcmp: {\r\n            offset: 0,\r\n            bytes: utils.bytes.bs58.encode(\r\n              BorshAccountsCoder.accountDiscriminator(\"groupStakeEntry\")\r\n            ),\r\n          },\r\n        },\r\n      ],\r\n      commitment,\r\n    }\r\n  );\r\n  const groupStakeEntryDatas: AccountData<GroupStakeEntryData>[] = [];\r\n  const coder = new BorshAccountsCoder(STAKE_POOL_IDL);\r\n  programAccounts.forEach((account) => {\r\n    try {\r\n      const groupStakeEntryData: GroupStakeEntryData = coder.decode(\r\n        \"groupStakeEntry\",\r\n        account.account.data\r\n      );\r\n      if (groupStakeEntryData) {\r\n        groupStakeEntryDatas.push({\r\n          ...account,\r\n          parsed: groupStakeEntryData,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(`Failed to decode group stake entry data`);\r\n    }\r\n  });\r\n\r\n  return groupStakeEntryDatas.sort((a, b) =>\r\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\r\n  );\r\n};\r\n\r\nexport const getGroupStakeEntry = async (\r\n  connection: Connection,\r\n  groupStakeEntryId: PublicKey,\r\n  commitment?: Commitment\r\n): Promise<AccountData<GroupStakeEntryData>> => {\r\n  const program = stakePoolProgram(connection, undefined, { commitment });\r\n  const parsed = await program.account.groupStakeEntry.fetch(groupStakeEntryId);\r\n  return {\r\n    parsed,\r\n    pubkey: groupStakeEntryId,\r\n  };\r\n};\r\n\r\nexport const getGroupStakeEntries = async (\r\n  connection: Connection,\r\n  groupStakeEntryIds: PublicKey[],\r\n  commitment?: Commitment\r\n): Promise<AccountData<GroupStakeEntryData>[]> => {\r\n  const program = stakePoolProgram(connection, undefined, { commitment });\r\n  const groupStakeEntries =\r\n    (await program.account.groupStakeEntry.fetchMultiple(\r\n      groupStakeEntryIds\r\n    )) as GroupStakeEntryData[];\r\n  return groupStakeEntries.map((tm, i) => ({\r\n    parsed: tm,\r\n    pubkey: groupStakeEntryIds[i]!,\r\n  }));\r\n};\r\n"]}