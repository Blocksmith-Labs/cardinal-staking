{"version":3,"file":"pda.js","sourceRoot":"","sources":["../../../../src/programs/receiptManager/pda.ts"],"names":[],"mappings":";;;AAAA,8CAA0C;AAC1C,6CAA4C;AAE5C,wBAKW;AAEX;;;GAGG;AACI,MAAM,oBAAoB,GAAG,CAAC,WAAsB,EAAE,IAAY,EAAE,EAAE;IAC3E,OAAO,mBAAS,CAAC,sBAAsB,CACrC;QACE,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAoB,CAAC;QAC7C,WAAW,CAAC,QAAQ,EAAE;QACtB,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;KAC9B,EACD,0BAAuB,CACxB,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AATW,QAAA,oBAAoB,wBAS/B;AAEF;;;GAGG;AACI,MAAM,kBAAkB,GAAG,CAAC,UAAqB,EAAE,EAAE;IAC1D,OAAO,mBAAS,CAAC,sBAAsB,CACrC,CAAC,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,qBAAkB,CAAC,EAAE,UAAU,CAAC,QAAQ,EAAE,CAAC,EACpE,0BAAuB,CACxB,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AALW,QAAA,kBAAkB,sBAK7B;AAEF;;;GAGG;AACI,MAAM,mBAAmB,GAAG,CACjC,cAAyB,EACzB,YAAuB,EACvB,EAAE;IACF,OAAO,mBAAS,CAAC,sBAAsB,CACrC;QACE,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAmB,CAAC;QAC5C,cAAc,CAAC,QAAQ,EAAE;QACzB,YAAY,CAAC,QAAQ,EAAE;KACxB,EACD,0BAAuB,CACxB,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAZW,QAAA,mBAAmB,uBAY9B","sourcesContent":["import { utils } from \"@coral-xyz/anchor\";\r\nimport { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport {\r\n  RECEIPT_ENTRY_SEED,\r\n  RECEIPT_MANAGER_ADDRESS,\r\n  RECEIPT_MANAGER_SEED,\r\n  REWARD_RECEIPT_SEED,\r\n} from \".\";\r\n\r\n/**\r\n * Finds the reward receipt manager id.\r\n * @returns\r\n */\r\nexport const findReceiptManagerId = (stakePoolId: PublicKey, name: string) => {\r\n  return PublicKey.findProgramAddressSync(\r\n    [\r\n      utils.bytes.utf8.encode(RECEIPT_MANAGER_SEED),\r\n      stakePoolId.toBuffer(),\r\n      utils.bytes.utf8.encode(name),\r\n    ],\r\n    RECEIPT_MANAGER_ADDRESS\r\n  )[0];\r\n};\r\n\r\n/**\r\n * Finds the reward receipt manager id.\r\n * @returns\r\n */\r\nexport const findReceiptEntryId = (stakeEntry: PublicKey) => {\r\n  return PublicKey.findProgramAddressSync(\r\n    [utils.bytes.utf8.encode(RECEIPT_ENTRY_SEED), stakeEntry.toBuffer()],\r\n    RECEIPT_MANAGER_ADDRESS\r\n  )[0];\r\n};\r\n\r\n/**\r\n * Finds the reward receipt id.\r\n * @returns\r\n */\r\nexport const findRewardReceiptId = (\r\n  receiptManager: PublicKey,\r\n  receiptEntry: PublicKey\r\n) => {\r\n  return PublicKey.findProgramAddressSync(\r\n    [\r\n      utils.bytes.utf8.encode(REWARD_RECEIPT_SEED),\r\n      receiptManager.toBuffer(),\r\n      receiptEntry.toBuffer(),\r\n    ],\r\n    RECEIPT_MANAGER_ADDRESS\r\n  )[0];\r\n};\r\n"]}