{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../../../../src/programs/receiptManager/accounts.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccountData } from \"@cardinal/common\";\r\nimport { tryGetAccount } from \"@cardinal/common\";\r\nimport { BorshAccountsCoder, utils } from \"@coral-xyz/anchor\";\r\nimport type { Commitment, Connection } from \"@solana/web3.js\";\r\nimport { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { REWARD_DISTRIBUTOR_ADDRESS } from \"../rewardDistributor\";\r\nimport type {\r\n  ReceiptEntryData,\r\n  ReceiptManagerData,\r\n  RewardReceiptData,\r\n} from \"./constants\";\r\nimport {\r\n  RECEIPT_MANAGER_ADDRESS,\r\n  RECEIPT_MANAGER_IDL,\r\n  receiptManagerProgram,\r\n} from \"./constants\";\r\n\r\nexport const getReceiptManager = async (\r\n  connection: Connection,\r\n  receiptManagerId: PublicKey,\r\n  commitment?: Commitment\r\n): Promise<AccountData<ReceiptManagerData>> => {\r\n  const program = receiptManagerProgram(connection, undefined, { commitment });\r\n  const parsed = (await program.account.receiptManager.fetch(\r\n    receiptManagerId\r\n  )) as ReceiptManagerData;\r\n  return {\r\n    parsed,\r\n    pubkey: receiptManagerId,\r\n  };\r\n};\r\n\r\nexport const getAllreceiptManagers = async (\r\n  connection: Connection,\r\n  commitment?: Commitment\r\n): Promise<AccountData<ReceiptManagerData>[]> =>\r\n  getAllOfType<ReceiptManagerData>(connection, \"receiptManager\", commitment);\r\n\r\nexport const getReceiptManagersForPool = async (\r\n  connection: Connection,\r\n  stakePoolId: PublicKey,\r\n  commitment?: Commitment\r\n): Promise<AccountData<RewardReceiptData>[]> => {\r\n  const programAccounts = await connection.getProgramAccounts(\r\n    REWARD_DISTRIBUTOR_ADDRESS,\r\n    {\r\n      filters: [\r\n        {\r\n          memcmp: {\r\n            offset: 0,\r\n            bytes: utils.bytes.bs58.encode(\r\n              BorshAccountsCoder.accountDiscriminator(\"receiptManager\")\r\n            ),\r\n          },\r\n        },\r\n        {\r\n          memcmp: {\r\n            offset: 9,\r\n            bytes: stakePoolId.toBase58(),\r\n          },\r\n        },\r\n      ],\r\n      commitment,\r\n    }\r\n  );\r\n  const ReceiptManagerDatas: AccountData<RewardReceiptData>[] = [];\r\n  const coder = new BorshAccountsCoder(RECEIPT_MANAGER_IDL);\r\n  programAccounts.forEach((account) => {\r\n    try {\r\n      const ReceiptManagerData: RewardReceiptData = coder.decode(\r\n        \"receiptManager\",\r\n        account.account.data\r\n      );\r\n      if (ReceiptManagerData) {\r\n        ReceiptManagerDatas.push({\r\n          ...account,\r\n          parsed: ReceiptManagerData,\r\n        });\r\n      }\r\n      // eslint-disable-next-line no-empty\r\n    } catch (e) {}\r\n  });\r\n  return ReceiptManagerDatas.sort((a, b) =>\r\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\r\n  );\r\n};\r\n\r\n//////// RECEIPT ENTRY ////////\r\nexport const getReceiptEntry = async (\r\n  connection: Connection,\r\n  receiptEntryId: PublicKey,\r\n  commitment?: Commitment\r\n): Promise<AccountData<ReceiptEntryData>> => {\r\n  const program = receiptManagerProgram(connection, undefined, { commitment });\r\n  const parsed = (await program.account.receiptEntry.fetch(\r\n    receiptEntryId\r\n  )) as ReceiptEntryData;\r\n  return {\r\n    parsed,\r\n    pubkey: receiptEntryId,\r\n  };\r\n};\r\n\r\n//////// REWARD RECEIPT ////////\r\nexport const getRewardReceipt = async (\r\n  connection: Connection,\r\n  rewardReceiptId: PublicKey,\r\n  commitment?: Commitment\r\n): Promise<AccountData<RewardReceiptData>> => {\r\n  const program = receiptManagerProgram(connection, undefined, { commitment });\r\n  const parsed = (await program.account.rewardReceipt.fetch(\r\n    rewardReceiptId\r\n  )) as RewardReceiptData;\r\n  return {\r\n    parsed,\r\n    pubkey: rewardReceiptId,\r\n  };\r\n};\r\n\r\nexport const getAllRewardReceipts = async (\r\n  connection: Connection,\r\n  commitment?: Commitment\r\n): Promise<AccountData<ReceiptManagerData>[]> =>\r\n  getAllOfType<ReceiptManagerData>(connection, \"rewardReceipt\", commitment);\r\n\r\nexport const getRewardReceiptsForManager = async (\r\n  connection: Connection,\r\n  rewardDistributorId: PublicKey,\r\n  commitment?: Commitment\r\n): Promise<AccountData<RewardReceiptData>[]> => {\r\n  const programAccounts = await connection.getProgramAccounts(\r\n    REWARD_DISTRIBUTOR_ADDRESS,\r\n    {\r\n      filters: [\r\n        {\r\n          memcmp: {\r\n            offset: 0,\r\n            bytes: utils.bytes.bs58.encode(\r\n              BorshAccountsCoder.accountDiscriminator(\"rewardReceipt\")\r\n            ),\r\n          },\r\n        },\r\n        {\r\n          memcmp: {\r\n            offset: 41,\r\n            bytes: rewardDistributorId.toBase58(),\r\n          },\r\n        },\r\n      ],\r\n      commitment,\r\n    }\r\n  );\r\n  const rewardReceiptDatas: AccountData<RewardReceiptData>[] = [];\r\n  const coder = new BorshAccountsCoder(RECEIPT_MANAGER_IDL);\r\n  programAccounts.forEach((account) => {\r\n    try {\r\n      const rewardReceiptData: RewardReceiptData = coder.decode(\r\n        \"rewardReceipt\",\r\n        account.account.data\r\n      );\r\n      if (rewardReceiptData) {\r\n        rewardReceiptDatas.push({\r\n          ...account,\r\n          parsed: rewardReceiptData,\r\n        });\r\n      }\r\n      // eslint-disable-next-line no-empty\r\n    } catch (e) {}\r\n  });\r\n  return rewardReceiptDatas.sort((a, b) =>\r\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\r\n  );\r\n};\r\n\r\nexport const getClaimableRewardReceiptsForManager = async (\r\n  connection: Connection,\r\n  receiptManagerId: PublicKey,\r\n  commitment?: Commitment\r\n): Promise<AccountData<RewardReceiptData>[]> => {\r\n  const ReceiptManagerData = await tryGetAccount(() =>\r\n    getReceiptManager(connection, receiptManagerId, commitment)\r\n  );\r\n  if (!ReceiptManagerData) {\r\n    throw `No reward receipt manager found for ${receiptManagerId.toString()}`;\r\n  }\r\n  const rewardReceipts = await getRewardReceiptsForManager(\r\n    connection,\r\n    receiptManagerId\r\n  );\r\n  return rewardReceipts.filter(\r\n    (receipt) =>\r\n      receipt.parsed.target.toString() !== PublicKey.default.toString()\r\n  );\r\n};\r\n\r\n//////// utils ////////\r\nexport const getAllOfType = async <T>(\r\n  connection: Connection,\r\n  key: string,\r\n  commitment?: Commitment\r\n): Promise<AccountData<T>[]> => {\r\n  const programAccounts = await connection.getProgramAccounts(\r\n    RECEIPT_MANAGER_ADDRESS,\r\n    {\r\n      filters: [\r\n        {\r\n          memcmp: {\r\n            offset: 0,\r\n            bytes: utils.bytes.bs58.encode(\r\n              BorshAccountsCoder.accountDiscriminator(key)\r\n            ),\r\n          },\r\n        },\r\n      ],\r\n      commitment,\r\n    }\r\n  );\r\n\r\n  const datas: AccountData<T>[] = [];\r\n  const coder = new BorshAccountsCoder(RECEIPT_MANAGER_IDL);\r\n  programAccounts.forEach((account) => {\r\n    try {\r\n      const data: T = coder.decode(key, account.account.data);\r\n      if (data) {\r\n        datas.push({\r\n          ...account,\r\n          parsed: data,\r\n        });\r\n      }\r\n      // eslint-disable-next-line no-empty\r\n    } catch (e) {}\r\n  });\r\n\r\n  return datas.sort((a, b) =>\r\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\r\n  );\r\n};\r\n"]}