{"version":3,"file":"transaction.js","sourceRoot":"","sources":["../../../../src/programs/receiptManager/transaction.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  tryGetAccount,\r\n  withFindOrInitAssociatedTokenAccount,\r\n} from \"@cardinal/common\";\r\nimport type { BN } from \"@coral-xyz/anchor\";\r\nimport type { Wallet } from \"@coral-xyz/anchor/dist/cjs/provider\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport type { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\r\nimport { SystemProgram } from \"@solana/web3.js\";\r\n\r\nimport { withUpdateTotalStakeSeconds } from \"../stakePool/transaction\";\r\nimport { getReceiptManager } from \"./accounts\";\r\nimport {\r\n  RECEIPT_MANAGER_PAYMENT_MANAGER,\r\n  receiptManagerProgram,\r\n} from \"./constants\";\r\nimport {\r\n  findReceiptEntryId,\r\n  findReceiptManagerId,\r\n  findRewardReceiptId,\r\n} from \"./pda\";\r\nimport { PAYMENT_MANAGER_ADDRESS } from \"cardinal-token-manager/dist/cjs/programs/paymentManager\";\r\nimport { getPaymentManager } from \"cardinal-token-manager/dist/cjs/programs/paymentManager/accounts\";\r\n\r\nexport const withInitReceiptManager = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    name: string;\r\n    stakePoolId: PublicKey;\r\n    authority: PublicKey;\r\n    requiredStakeSeconds: BN;\r\n    stakeSecondsToUse: BN;\r\n    paymentMint: PublicKey;\r\n    paymentManagerId?: PublicKey;\r\n    paymentRecipientId: PublicKey;\r\n    requiresAuthorization: boolean;\r\n    maxClaimedReceipts?: BN;\r\n  }\r\n): Promise<[Transaction, PublicKey]> => {\r\n  const receiptManagerId = findReceiptManagerId(\r\n    params.stakePoolId,\r\n    params.name\r\n  );\r\n  const program = receiptManagerProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .initReceiptManager({\r\n      name: params.name,\r\n      authority: params.authority,\r\n      requiredStakeSeconds: params.requiredStakeSeconds,\r\n      stakeSecondsToUse: params.stakeSecondsToUse,\r\n      paymentMint: params.paymentMint,\r\n      paymentManager:\r\n        params.paymentManagerId || RECEIPT_MANAGER_PAYMENT_MANAGER,\r\n      paymentRecipient: params.paymentRecipientId,\r\n      requiresAuthorization: params.requiresAuthorization,\r\n      maxClaimedReceipts: params.maxClaimedReceipts ?? null,\r\n    })\r\n    .accounts({\r\n      receiptManager: receiptManagerId,\r\n      stakePool: params.stakePoolId,\r\n      payer: wallet.publicKey,\r\n      systemProgram: SystemProgram.programId,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return [transaction, receiptManagerId];\r\n};\r\n\r\nexport const withInitReceiptEntry = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    stakeEntryId: PublicKey;\r\n  }\r\n): Promise<[Transaction, PublicKey]> => {\r\n  const receiptEntryId = findReceiptEntryId(params.stakeEntryId);\r\n  const program = receiptManagerProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .initReceiptEntry()\r\n    .accounts({\r\n      receiptEntry: receiptEntryId,\r\n      stakeEntry: params.stakeEntryId,\r\n      payer: wallet.publicKey,\r\n      systemProgram: SystemProgram.programId,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return [transaction, receiptEntryId];\r\n};\r\n\r\nexport const withInitRewardReceipt = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    receiptManagerId: PublicKey;\r\n    receiptEntryId: PublicKey;\r\n    stakeEntryId: PublicKey;\r\n    payer?: PublicKey;\r\n  }\r\n): Promise<[Transaction, PublicKey]> => {\r\n  const rewardReceiptId = findRewardReceiptId(\r\n    params.receiptManagerId,\r\n    params.receiptEntryId\r\n  );\r\n  const program = receiptManagerProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .initRewardReceipt()\r\n    .accounts({\r\n      rewardReceipt: rewardReceiptId,\r\n      receiptManager: params.receiptManagerId,\r\n      receiptEntry: params.receiptEntryId,\r\n      stakeEntry: params.stakeEntryId,\r\n      payer: wallet.publicKey,\r\n      systemProgram: SystemProgram.programId,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return [transaction, rewardReceiptId];\r\n};\r\n\r\nexport const withUpdateReceiptManager = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    name: string;\r\n    stakePoolId: PublicKey;\r\n    authority: PublicKey;\r\n    requiredStakeSeconds: BN;\r\n    stakeSecondsToUse: BN;\r\n    paymentMint: PublicKey;\r\n    paymentManagerId?: PublicKey;\r\n    paymentRecipientId: PublicKey;\r\n    requiresAuthorization: boolean;\r\n    maxClaimedReceipts?: BN;\r\n  }\r\n): Promise<[Transaction, PublicKey]> => {\r\n  const receiptManagerId = findReceiptManagerId(\r\n    params.stakePoolId,\r\n    params.name\r\n  );\r\n  const receiptManagerData = await getReceiptManager(\r\n    connection,\r\n    receiptManagerId\r\n  );\r\n\r\n  const program = receiptManagerProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .updateReceiptManager({\r\n      authority: params.authority || receiptManagerData.parsed.authority,\r\n      requiredStakeSeconds:\r\n        params.requiredStakeSeconds ||\r\n        receiptManagerData.parsed.requiredStakeSeconds,\r\n      stakeSecondsToUse:\r\n        params.stakeSecondsToUse || receiptManagerData.parsed.stakeSecondsToUse,\r\n      paymentMint: params.paymentMint || receiptManagerData.parsed.paymentMint,\r\n      paymentManager:\r\n        params.paymentManagerId || receiptManagerData.parsed.paymentManager,\r\n      paymentRecipient:\r\n        params.paymentRecipientId || receiptManagerData.parsed.paymentRecipient,\r\n      requiresAuthorization:\r\n        params.requiresAuthorization ||\r\n        receiptManagerData.parsed.requiresAuthorization,\r\n      maxClaimedReceipts:\r\n        params.maxClaimedReceipts ||\r\n        receiptManagerData.parsed.maxClaimedReceipts,\r\n    })\r\n    .accounts({\r\n      receiptManager: receiptManagerId,\r\n      authority: wallet.publicKey,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return [transaction, receiptManagerId];\r\n};\r\n\r\nexport const withClaimRewardReceipt = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    receiptManagerName: string;\r\n    stakePoolId: PublicKey;\r\n    stakeEntryId: PublicKey;\r\n    claimer: PublicKey;\r\n    payer: PublicKey;\r\n  }\r\n): Promise<[Transaction, PublicKey]> => {\r\n  const receiptManagerId = findReceiptManagerId(\r\n    params.stakePoolId,\r\n    params.receiptManagerName\r\n  );\r\n  const checkReceiptManager = await tryGetAccount(() =>\r\n    getReceiptManager(connection, receiptManagerId)\r\n  );\r\n  if (!checkReceiptManager) {\r\n    throw `No reward receipt manager found with name ${params.receiptManagerName\r\n    } for pool ${params.stakePoolId.toString()}`;\r\n  }\r\n  const receiptEntryId = findReceiptEntryId(params.stakeEntryId);\r\n  const rewardReceiptId = findRewardReceiptId(receiptManagerId, receiptEntryId);\r\n\r\n  const checkPaymentManager = await tryGetAccount(() =>\r\n    getPaymentManager(connection, checkReceiptManager.parsed.paymentManager)\r\n  );\r\n  if (!checkPaymentManager) {\r\n    throw `Could not find payment manager with address ${checkReceiptManager.parsed.paymentManager.toString()}`;\r\n  }\r\n\r\n  const feeCollectorTokenAccountId = await withFindOrInitAssociatedTokenAccount(\r\n    transaction,\r\n    connection,\r\n    checkReceiptManager.parsed.paymentMint,\r\n    checkPaymentManager.parsed.feeCollector,\r\n    wallet.publicKey\r\n  );\r\n  const paymentRecipientTokenAccountId =\r\n    await withFindOrInitAssociatedTokenAccount(\r\n      transaction,\r\n      connection,\r\n      checkReceiptManager.parsed.paymentMint,\r\n      checkReceiptManager.parsed.paymentRecipient,\r\n      params.payer ?? wallet.publicKey\r\n    );\r\n  const payerTokenAccountId = await withFindOrInitAssociatedTokenAccount(\r\n    transaction,\r\n    connection,\r\n    checkReceiptManager.parsed.paymentMint,\r\n    params.payer,\r\n    wallet.publicKey\r\n  );\r\n\r\n  await withUpdateTotalStakeSeconds(transaction, connection, wallet, {\r\n    stakeEntryId: params.stakeEntryId,\r\n    lastStaker: params.claimer,\r\n  });\r\n\r\n  const program = receiptManagerProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .claimRewardReceipt()\r\n    .accounts({\r\n      rewardReceipt: rewardReceiptId,\r\n      receiptManager: receiptManagerId,\r\n      stakeEntry: params.stakeEntryId,\r\n      receiptEntry: receiptEntryId,\r\n      paymentManager: checkReceiptManager.parsed.paymentManager,\r\n      feeCollectorTokenAccount: feeCollectorTokenAccountId,\r\n      paymentRecipientTokenAccount: paymentRecipientTokenAccountId,\r\n      payerTokenAccount: payerTokenAccountId,\r\n      payer: wallet.publicKey,\r\n      claimer: params.claimer,\r\n      cardinalPaymentManager: PAYMENT_MANAGER_ADDRESS,\r\n      tokenProgram: TOKEN_PROGRAM_ID,\r\n      systemProgram: SystemProgram.programId,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return [transaction, rewardReceiptId];\r\n};\r\n\r\nexport const withCloseReceiptManager = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    receiptManagerId: PublicKey;\r\n  }\r\n): Promise<Transaction> => {\r\n  const program = receiptManagerProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .closeReceiptManager()\r\n    .accounts({\r\n      receiptManager: params.receiptManagerId,\r\n      authority: wallet.publicKey,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return transaction;\r\n};\r\n\r\nexport const withCloseReceiptEntry = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    receiptManagerId: PublicKey;\r\n    receiptEntryId: PublicKey;\r\n    stakeEntryId: PublicKey;\r\n  }\r\n): Promise<Transaction> => {\r\n  const program = receiptManagerProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .closeReceiptEntry()\r\n    .accounts({\r\n      receiptEntry: params.receiptEntryId,\r\n      receiptManager: params.receiptManagerId,\r\n      stakeEntry: params.stakeEntryId,\r\n      authority: wallet.publicKey,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return transaction;\r\n};\r\n\r\nexport const withCloseRewardReceipt = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    receiptManagerId: PublicKey;\r\n    rewardReceiptId: PublicKey;\r\n  }\r\n): Promise<Transaction> => {\r\n  const program = receiptManagerProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .closeRewardReceipt()\r\n    .accounts({\r\n      rewardReceipt: params.rewardReceiptId,\r\n      receiptManager: params.receiptManagerId,\r\n      authority: wallet.publicKey,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return transaction;\r\n};\r\n\r\nexport const withSetRewardReceiptAllowed = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  params: {\r\n    receiptManagerId: PublicKey;\r\n    rewardReceiptId: PublicKey;\r\n    auth: boolean;\r\n  }\r\n): Promise<Transaction> => {\r\n  const program = receiptManagerProgram(connection, wallet);\r\n  const ix = await program.methods\r\n    .setRewardReceiptAllowed(params.auth)\r\n    .accounts({\r\n      receiptManager: params.receiptManagerId,\r\n      rewardReceipt: params.rewardReceiptId,\r\n      authority: wallet.publicKey,\r\n    })\r\n    .instruction();\r\n  transaction.add(ix);\r\n  return transaction;\r\n};\r\n"]}