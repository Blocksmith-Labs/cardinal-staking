{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/programs/rewardDistributor/utils.ts"],"names":[],"mappings":";;;AAAA,6CAG0B;AAS1B,2CAAoD;AAE7C,MAAM,4BAA4B,GAAG,KAAK,EAC/C,WAAwB,EACxB,UAAsB,EACtB,MAAc,EACd,mBAA8B,EAC9B,IAA2B,EAC3B,UAAqB,EACrB,cAAwB,EACA,EAAE;IAC1B,QAAQ,IAAI,EAAE;QACZ,KAAK,iCAAqB,CAAC,IAAI,CAAC,CAAC;YAC/B,OAAO,EAAE,CAAC;SACX;QACD,KAAK,iCAAqB,CAAC,QAAQ,CAAC,CAAC;YACnC,MAAM,yCAAyC,GAC7C,MAAM,IAAA,6CAAoC,EACxC,WAAW,EACX,UAAU,EACV,UAAU,EACV,mBAAmB,EACnB,MAAM,CAAC,SAAS,EAChB,IAAI,CACL,CAAC;YACJ,MAAM,4BAA4B,GAAG,MAAM,IAAA,gBAAO,EAChD,UAAU,EACV,MAAM,CAAC,SAAS,EAChB,IAAI,CACL,CAAC;YACF,OAAO;gBACL;oBACE,MAAM,EAAE,yCAAyC;oBACjD,QAAQ,EAAE,KAAK;oBACf,UAAU,EAAE,IAAI;iBACjB;aACF,CAAC,MAAM,CACN,CAAC,cAAc;gBACb,CAAC,CAAC;oBACE;wBACE,MAAM,EAAE,4BAA4B;wBACpC,QAAQ,EAAE,KAAK;wBACf,UAAU,EAAE,IAAI;qBACjB;iBACF;gBACH,CAAC,CAAC,EAAE,CACP,CAAC;SACH;QACD;YACE,OAAO,EAAE,CAAC;KACb;AACH,CAAC,CAAC;AAjDW,QAAA,4BAA4B,gCAiDvC","sourcesContent":["import {\r\n  findAta,\r\n  withFindOrInitAssociatedTokenAccount,\r\n} from \"@cardinal/common\";\r\nimport type { Wallet } from \"@coral-xyz/anchor/dist/cjs/provider\";\r\nimport type {\r\n  AccountMeta,\r\n  Connection,\r\n  PublicKey,\r\n  Transaction,\r\n} from \"@solana/web3.js\";\r\n\r\nimport { RewardDistributorKind } from \"./constants\";\r\n\r\nexport const withRemainingAccountsForKind = async (\r\n  transaction: Transaction,\r\n  connection: Connection,\r\n  wallet: Wallet,\r\n  rewardDistributorId: PublicKey,\r\n  kind: RewardDistributorKind,\r\n  rewardMint: PublicKey,\r\n  isClaimRewards?: boolean\r\n): Promise<AccountMeta[]> => {\r\n  switch (kind) {\r\n    case RewardDistributorKind.Mint: {\r\n      return [];\r\n    }\r\n    case RewardDistributorKind.Treasury: {\r\n      const rewardDistributorRewardMintTokenAccountId =\r\n        await withFindOrInitAssociatedTokenAccount(\r\n          transaction,\r\n          connection,\r\n          rewardMint,\r\n          rewardDistributorId,\r\n          wallet.publicKey,\r\n          true\r\n        );\r\n      const userRewardMintTokenAccountId = await findAta(\r\n        rewardMint,\r\n        wallet.publicKey,\r\n        true\r\n      );\r\n      return [\r\n        {\r\n          pubkey: rewardDistributorRewardMintTokenAccountId,\r\n          isSigner: false,\r\n          isWritable: true,\r\n        },\r\n      ].concat(\r\n        !isClaimRewards\r\n          ? [\r\n              {\r\n                pubkey: userRewardMintTokenAccountId,\r\n                isSigner: false,\r\n                isWritable: true,\r\n              },\r\n            ]\r\n          : []\r\n      );\r\n    }\r\n    default:\r\n      return [];\r\n  }\r\n};\r\n"]}